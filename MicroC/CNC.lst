;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2/6/2018 11:33:33 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF006EF7E  	GOTO        3324
_interrupt:
;CNC.c,345 :: 		void interrupt()
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;CNC.c,347 :: 		if(Uart1_Data_Ready() == 1)
0x0010	0xD939      	RCALL       _UART1_Data_Ready
0x0012	0x5000      	MOVF        R0, 0 
0x0014	0x0A01      	XORLW       1
0x0016	0xE109      	BNZ         L_interrupt92
;CNC.c,349 :: 		stopAction = Uart1_Read();
0x0018	0xD92C      	RCALL       _UART1_Read
0x001A	0xF15BC000  	MOVFF       R0, _stopAction
;CNC.c,350 :: 		if(stopAction == 'S')
0x001E	0x5000      	MOVF        R0, 0 
0x0020	0x0A53      	XORLW       83
0x0022	0xE103      	BNZ         L_interrupt93
;CNC.c,352 :: 		PORTB  = 0b00100100;        //Turn on red leds only
0x0024	0x0E24      	MOVLW       36
0x0026	0x6E81      	MOVWF       PORTB 
;CNC.c,353 :: 		INTCON.TMR0IE = 0;     //Disable interrupt until a new start
0x0028	0x9AF2      	BCF         INTCON, 5 
;CNC.c,354 :: 		}
L_interrupt93:
;CNC.c,355 :: 		}
L_interrupt92:
;CNC.c,356 :: 		INTCON.TMR0IF = 0;
0x002A	0x94F2      	BCF         INTCON, 2 
;CNC.c,357 :: 		}
L_end_interrupt:
L__interrupt170:
0x002C	0xF000C016  	MOVFF       22, R0
0x0030	0xF001C015  	MOVFF       21, R1
0x0034	0x0011      	RETFIE      1
; end of _interrupt
_UART1_Write:
;__Lib_UART_c67.c,58 :: 		
;__Lib_UART_c67.c,59 :: 		
L_UART1_Write3:
0x0036	0xB2AC      	BTFSC       TXSTA, 1 
0x0038	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,60 :: 		
0x003A	0x0000      	NOP
0x003C	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,61 :: 		
0x003E	0xFFADC17E  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,62 :: 		
L_end_UART1_Write:
0x0042	0x0012      	RETURN      0
; end of _UART1_Write
_Mul_32x32_U:
;__Lib_Math.c,1616 :: 		
;__Lib_Math.c,1631 :: 		
0x0044	0x0E22      	MOVLW       34
;__Lib_Math.c,1632 :: 		
0x0046	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,1633 :: 		
0x0048	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,1634 :: 		
0x004A	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,1635 :: 		
0x004C	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,1636 :: 		
0x004E	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,1638 :: 		
_NEXT:
;__Lib_Math.c,1642 :: 		
0x0050	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1643 :: 		
0x0052	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1644 :: 		
0x0054	0xD01F      	BRA         _EXIT2
;__Lib_Math.c,1645 :: 		
0x0056	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,1647 :: 		
_LOOP:
;__Lib_Math.c,1656 :: 		
0x0058	0x320B      	RRCF        R11, 1, 0
;__Lib_Math.c,1657 :: 		
0x005A	0x320A      	RRCF        R10, 1, 0
;__Lib_Math.c,1658 :: 		
0x005C	0x3209      	RRCF        R9, 1, 0
;__Lib_Math.c,1659 :: 		
0x005E	0x3208      	RRCF        R8, 1, 0
;__Lib_Math.c,1660 :: 		
0x0060	0x3203      	RRCF        R3, 1, 0
;__Lib_Math.c,1661 :: 		
0x0062	0x3202      	RRCF        R2, 1, 0
;__Lib_Math.c,1662 :: 		
0x0064	0x3201      	RRCF        R1, 1, 0
;__Lib_Math.c,1663 :: 		
0x0066	0x3200      	RRCF        R0, 1, 0
;__Lib_Math.c,1668 :: 		
0x0068	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,1669 :: 		
0x006A	0xD7F2      	BRA         _NEXT
;__Lib_Math.c,1670 :: 		
0x006C	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1671 :: 		
0x006E	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1672 :: 		
0x0070	0xD009      	BRA         _EXIT1
;__Lib_Math.c,1679 :: 		
0x0072	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1680 :: 		
0x0074	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1681 :: 		
0x0076	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1684 :: 		
0x0078	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1685 :: 		
0x007A	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1688 :: 		
0x007C	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1689 :: 		
0x007E	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1692 :: 		
0x0080	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1694 :: 		
0x0082	0xD7EA      	BRA         _LOOP
;__Lib_Math.c,1696 :: 		
_EXIT1:
;__Lib_Math.c,1701 :: 		
0x0084	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1702 :: 		
0x0086	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1703 :: 		
0x0088	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1706 :: 		
0x008A	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1707 :: 		
0x008C	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1710 :: 		
0x008E	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1711 :: 		
0x0090	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1714 :: 		
0x0092	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1717 :: 		
_EXIT2:
;__Lib_Math.c,1719 :: 		
L_end_Mul_32x32_U:
0x0094	0x0012      	RETURN      0
; end of _Mul_32x32_U
_writeLine:
;CNC.c,338 :: 		void writeLine()
;CNC.c,340 :: 		UART1_Write('\r');
0x0096	0x0E0D      	MOVLW       13
0x0098	0x0101      	MOVLB       1
0x009A	0x6F7E      	MOVWF       FARG_UART1_Write_data_, 1
0x009C	0xDFCC      	RCALL       _UART1_Write
;CNC.c,341 :: 		UART1_Write('\n');
0x009E	0x0E0A      	MOVLW       10
0x00A0	0x0101      	MOVLB       1
0x00A2	0x6F7E      	MOVWF       FARG_UART1_Write_data_, 1
0x00A4	0xDFC8      	RCALL       _UART1_Write
;CNC.c,342 :: 		}
L_end_writeLine:
0x00A6	0x0012      	RETURN      0
; end of _writeLine
_VDelay_ms:
;__Lib_Delays.c,123 :: 		void VDelay_ms(unsigned Time_ms){
;__Lib_Delays.c,126 :: 		NumberOfCyc = Clock_kHz()>>2;
0x00A8	0x0ED0      	MOVLW       208
0x00AA	0x0101      	MOVLB       1
0x00AC	0x6F7A      	MOVWF       VDelay_ms_NumberOfCyc_L0, 1
0x00AE	0x0E07      	MOVLW       7
0x00B0	0x6F7B      	MOVWF       VDelay_ms_NumberOfCyc_L0+1, 1
0x00B2	0x0E00      	MOVLW       0
0x00B4	0x6F7C      	MOVWF       VDelay_ms_NumberOfCyc_L0+2, 1
0x00B6	0x6F7D      	MOVWF       VDelay_ms_NumberOfCyc_L0+3, 1
;__Lib_Delays.c,127 :: 		NumberOfCyc *= Time_ms;
0x00B8	0x0ED0      	MOVLW       208
0x00BA	0x6E00      	MOVWF       R0 
0x00BC	0x0E07      	MOVLW       7
0x00BE	0x6E01      	MOVWF       R1 
0x00C0	0x0E00      	MOVLW       0
0x00C2	0x6E02      	MOVWF       R2 
0x00C4	0x0E00      	MOVLW       0
0x00C6	0x6E03      	MOVWF       R3 
0x00C8	0xF004C178  	MOVFF       FARG_VDelay_ms_Time_ms, R4
0x00CC	0xF005C179  	MOVFF       FARG_VDelay_ms_Time_ms+1, R5
0x00D0	0x0E00      	MOVLW       0
0x00D2	0x6E06      	MOVWF       R6 
0x00D4	0x6E07      	MOVWF       R7 
0x00D6	0xDFB6      	RCALL       _Mul_32x32_U
0x00D8	0xF17AC000  	MOVFF       R0, VDelay_ms_NumberOfCyc_L0
0x00DC	0xF17BC001  	MOVFF       R1, VDelay_ms_NumberOfCyc_L0+1
0x00E0	0xF17CC002  	MOVFF       R2, VDelay_ms_NumberOfCyc_L0+2
0x00E4	0xF17DC003  	MOVFF       R3, VDelay_ms_NumberOfCyc_L0+3
;__Lib_Delays.c,128 :: 		if (NumberOfCyc < 660)
0x00E8	0x0E00      	MOVLW       0
0x00EA	0x5C03      	SUBWF       R3, 0 
0x00EC	0xE108      	BNZ         L__VDelay_ms54
0x00EE	0x0E00      	MOVLW       0
0x00F0	0x5C02      	SUBWF       R2, 0 
0x00F2	0xE105      	BNZ         L__VDelay_ms54
0x00F4	0x0E02      	MOVLW       2
0x00F6	0x5C01      	SUBWF       R1, 0 
0x00F8	0xE102      	BNZ         L__VDelay_ms54
0x00FA	0x0E94      	MOVLW       148
0x00FC	0x5C00      	SUBWF       R0, 0 
L__VDelay_ms54:
0x00FE	0xE201      	BC          L_VDelay_ms23
;__Lib_Delays.c,129 :: 		return;
0x0100	0xD031      	BRA         L_end_VDelay_ms
L_VDelay_ms23:
;__Lib_Delays.c,130 :: 		NumberOfCyc -= 660;
0x0102	0x0E94      	MOVLW       148
0x0104	0x5F7A      	SUBWF       VDelay_ms_NumberOfCyc_L0, 1, 1
0x0106	0x0E02      	MOVLW       2
0x0108	0x5B7B      	SUBWFB      VDelay_ms_NumberOfCyc_L0+1, 1, 1
0x010A	0x0E00      	MOVLW       0
0x010C	0x5B7C      	SUBWFB      VDelay_ms_NumberOfCyc_L0+2, 1, 1
0x010E	0x5B7D      	SUBWFB      VDelay_ms_NumberOfCyc_L0+3, 1, 1
;__Lib_Delays.c,131 :: 		NumberOfCyc >>=  5;
0x0110	0x0E05      	MOVLW       5
0x0112	0x6E00      	MOVWF       R0 
0x0114	0x5000      	MOVF        R0, 0 
L__VDelay_ms55:
0x0116	0xE007      	BZ          L__VDelay_ms56
0x0118	0x337D      	RRCF        VDelay_ms_NumberOfCyc_L0+3, 1, 1
0x011A	0x337C      	RRCF        VDelay_ms_NumberOfCyc_L0+2, 1, 1
0x011C	0x337B      	RRCF        VDelay_ms_NumberOfCyc_L0+1, 1, 1
0x011E	0x337A      	RRCF        VDelay_ms_NumberOfCyc_L0, 1, 1
0x0120	0x9F7D      	BCF         VDelay_ms_NumberOfCyc_L0+3, 7, 1
0x0122	0x0FFF      	ADDLW       255
0x0124	0xD7F8      	BRA         L__VDelay_ms55
L__VDelay_ms56:
;__Lib_Delays.c,133 :: 		while (NumberOfCyc--)
L_VDelay_ms24:
0x0126	0xF000C17A  	MOVFF       VDelay_ms_NumberOfCyc_L0, R0
0x012A	0xF001C17B  	MOVFF       VDelay_ms_NumberOfCyc_L0+1, R1
0x012E	0xF002C17C  	MOVFF       VDelay_ms_NumberOfCyc_L0+2, R2
0x0132	0xF003C17D  	MOVFF       VDelay_ms_NumberOfCyc_L0+3, R3
0x0136	0x0E01      	MOVLW       1
0x0138	0x5F7A      	SUBWF       VDelay_ms_NumberOfCyc_L0, 1, 1
0x013A	0x0E00      	MOVLW       0
0x013C	0x5B7B      	SUBWFB      VDelay_ms_NumberOfCyc_L0+1, 1, 1
0x013E	0x5B7C      	SUBWFB      VDelay_ms_NumberOfCyc_L0+2, 1, 1
0x0140	0x5B7D      	SUBWFB      VDelay_ms_NumberOfCyc_L0+3, 1, 1
0x0142	0x5000      	MOVF        R0, 0 
0x0144	0x1001      	IORWF       R1, 0 
0x0146	0x1002      	IORWF       R2, 0 
0x0148	0x1003      	IORWF       R3, 0 
0x014A	0xE00C      	BZ          L_VDelay_ms25
;__Lib_Delays.c,135 :: 		asm nop;
0x014C	0x0000      	NOP
;__Lib_Delays.c,136 :: 		asm nop;
0x014E	0x0000      	NOP
;__Lib_Delays.c,137 :: 		asm nop;
0x0150	0x0000      	NOP
;__Lib_Delays.c,138 :: 		asm nop;
0x0152	0x0000      	NOP
;__Lib_Delays.c,139 :: 		asm nop;
0x0154	0x0000      	NOP
;__Lib_Delays.c,140 :: 		asm nop;
0x0156	0x0000      	NOP
;__Lib_Delays.c,141 :: 		asm nop;
0x0158	0x0000      	NOP
;__Lib_Delays.c,142 :: 		asm nop;
0x015A	0x0000      	NOP
;__Lib_Delays.c,143 :: 		asm nop;
0x015C	0x0000      	NOP
;__Lib_Delays.c,144 :: 		asm nop;
0x015E	0x0000      	NOP
;__Lib_Delays.c,145 :: 		asm nop;
0x0160	0x0000      	NOP
;__Lib_Delays.c,146 :: 		}
0x0162	0xD7E1      	BRA         L_VDelay_ms24
L_VDelay_ms25:
;__Lib_Delays.c,147 :: 		}
L_end_VDelay_ms:
0x0164	0x0012      	RETURN      0
; end of _VDelay_ms
_UART1_Write_Text:
;__Lib_UART_c67.c,66 :: 		
;__Lib_UART_c67.c,67 :: 		
0x0166	0x0101      	MOVLB       1
0x0168	0x6B7B      	CLRF        UART1_Write_Text_counter_L0, 1
;__Lib_UART_c67.c,69 :: 		
0x016A	0xFFE9C178  	MOVFF       FARG_UART1_Write_Text_uart_text, FSR0L
0x016E	0xFFEAC179  	MOVFF       FARG_UART1_Write_Text_uart_text+1, FSR0H
0x0172	0xF17ACFEE  	MOVFF       POSTINC0, UART1_Write_Text_data__L0
;__Lib_UART_c67.c,70 :: 		
L_UART1_Write_Text5:
0x0176	0x517A      	MOVF        UART1_Write_Text_data__L0, 0, 1
0x0178	0x0A00      	XORLW       0
0x017A	0xE00E      	BZ          L_UART1_Write_Text6
;__Lib_UART_c67.c,71 :: 		
0x017C	0xF17EC17A  	MOVFF       UART1_Write_Text_data__L0, FARG_UART1_Write_data_
0x0180	0xDF5A      	RCALL       _UART1_Write
;__Lib_UART_c67.c,72 :: 		
0x0182	0x0101      	MOVLB       1
0x0184	0x2B7B      	INCF        UART1_Write_Text_counter_L0, 1, 1
;__Lib_UART_c67.c,73 :: 		
0x0186	0x517B      	MOVF        UART1_Write_Text_counter_L0, 0, 1
0x0188	0x2578      	ADDWF       FARG_UART1_Write_Text_uart_text, 0, 1
0x018A	0x6EE9      	MOVWF       FSR0L 
0x018C	0x0E00      	MOVLW       0
0x018E	0x2179      	ADDWFC      FARG_UART1_Write_Text_uart_text+1, 0, 1
0x0190	0x6EEA      	MOVWF       FSR0H 
0x0192	0xF17ACFEE  	MOVFF       POSTINC0, UART1_Write_Text_data__L0
;__Lib_UART_c67.c,74 :: 		
0x0196	0xD7EF      	BRA         L_UART1_Write_Text5
L_UART1_Write_Text6:
;__Lib_UART_c67.c,75 :: 		
L_end_UART1_Write_Text:
0x0198	0x0012      	RETURN      0
; end of _UART1_Write_Text
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x019A	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x019C	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x019E	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x01A0	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x01A2	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x01A4	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x01A8	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x01AC	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x01AE	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x01B0	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x01B4	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x01B8	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x01BA	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x01BC	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x01BE	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x01C0	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x01C2	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x01C4	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x01C6	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x01C8	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x01CA	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x01CC	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x01CE	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x01D0	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x01D2	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x01D4	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x01D6	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x01D8	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x01DC	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x01E0	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x01E4	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x01E8	0x0012      	RETURN      0
; end of _Mul_16X16_U
_isdigit:
;__Lib_CType.c,23 :: 		
;__Lib_CType.c,24 :: 		
0x01EA	0x0101      	MOVLB       1
0x01EC	0x5178      	MOVF        FARG_isdigit_character, 0, 1
0x01EE	0x0839      	SUBLW       57
0x01F0	0xE306      	BNC         L_isdigit9
0x01F2	0x0E30      	MOVLW       48
0x01F4	0x5D78      	SUBWF       FARG_isdigit_character, 0, 1
0x01F6	0xE303      	BNC         L_isdigit9
0x01F8	0x0E01      	MOVLW       1
0x01FA	0x6E00      	MOVWF       R0 
0x01FC	0xD001      	BRA         L_isdigit8
L_isdigit9:
0x01FE	0x6A00      	CLRF        R0 
L_isdigit8:
;__Lib_CType.c,25 :: 		
L_end_isdigit:
0x0200	0x0012      	RETURN      0
; end of _isdigit
_writeToStepper1:
;CNC.c,427 :: 		void writeToStepper1(char newstep)
;CNC.c,429 :: 		PORTD &= 0b11110000;
0x0202	0x0EF0      	MOVLW       240
0x0204	0x1683      	ANDWF       PORTD, 1 
;CNC.c,430 :: 		PORTD |= newStep;
0x0206	0x0101      	MOVLB       1
0x0208	0x5178      	MOVF        FARG_writeToStepper1_newstep, 0, 1
0x020A	0x1283      	IORWF       PORTD, 1 
;CNC.c,431 :: 		}
L_end_writeToStepper1:
0x020C	0x0012      	RETURN      0
; end of _writeToStepper1
_Div_16x16_S_L:
;__Lib_Math.c,139 :: 		
;__Lib_Math.c,146 :: 		
0x020E	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,147 :: 		
0x0210	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,148 :: 		
0x0212	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,149 :: 		
0x0214	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,150 :: 		
0x0216	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,151 :: 		
0x0218	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,152 :: 		
0x021A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,153 :: 		
0x021C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,154 :: 		
0x021E	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,155 :: 		
0x0220	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,156 :: 		
0x0222	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,158 :: 		
0x0224	0x0E0F      	MOVLW       15
;__Lib_Math.c,159 :: 		
0x0226	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,161 :: 		
0x0228	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,162 :: 		
0x022A	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,163 :: 		
0x022C	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,164 :: 		
0x022E	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,166 :: 		
0x0230	0xA000      	BTFSS       R0, 0, 0
;__Lib_Math.c,167 :: 		
0x0232	0xD006      	BRA         $+14
;__Lib_Math.c,168 :: 		
0x0234	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,169 :: 		
0x0236	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,170 :: 		
0x0238	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,171 :: 		
0x023A	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,172 :: 		
0x023C	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,173 :: 		
0x023E	0xD005      	BRA         $+12
;__Lib_Math.c,175 :: 		
0x0240	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,176 :: 		
0x0242	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,177 :: 		
0x0244	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,178 :: 		
0x0246	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,179 :: 		
0x0248	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,181 :: 		
0x024A	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,182 :: 		
0x024C	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,184 :: 		
0x024E	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,185 :: 		
0x0250	0xD7EB      	BRA         $-40
;__Lib_Math.c,187 :: 		
0x0252	0xB000      	BTFSC       R0, 0, 0
;__Lib_Math.c,188 :: 		
0x0254	0xD006      	BRA         $+14
;__Lib_Math.c,189 :: 		
0x0256	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,190 :: 		
0x0258	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,191 :: 		
0x025A	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,192 :: 		
0x025C	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,193 :: 		
0x025E	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,194 :: 		
0x0260	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,195 :: 		
0x0262	0x0000      	NOP
;__Lib_Math.c,197 :: 		
L_end_Div_16x16_S_L:
0x0264	0x0012      	RETURN      0
; end of _Div_16x16_S_L
_writeToStepper2:
;CNC.c,434 :: 		void writeToStepper2(char newstep)
;CNC.c,436 :: 		PORTD &= 0b00001111;
0x0266	0x0E0F      	MOVLW       15
0x0268	0x1683      	ANDWF       PORTD, 1 
;CNC.c,437 :: 		PORTD |= newStep;
0x026A	0x0101      	MOVLB       1
0x026C	0x5178      	MOVF        FARG_writeToStepper2_newstep, 0, 1
0x026E	0x1283      	IORWF       PORTD, 1 
;CNC.c,438 :: 		}
L_end_writeToStepper2:
0x0270	0x0012      	RETURN      0
; end of _writeToStepper2
_UART1_Read:
;__Lib_UART_c67.c,39 :: 		
;__Lib_UART_c67.c,42 :: 		
0x0272	0xF001CFAE  	MOVFF       RCREG, R1
;__Lib_UART_c67.c,43 :: 		
0x0276	0xA2AB      	BTFSS       RCSTA, 1 
0x0278	0xD002      	BRA         L_UART1_Read2
;__Lib_UART_c67.c,44 :: 		
0x027A	0x98AB      	BCF         RCSTA, 4 
;__Lib_UART_c67.c,45 :: 		
0x027C	0x88AB      	BSF         RCSTA, 4 
;__Lib_UART_c67.c,46 :: 		
L_UART1_Read2:
;__Lib_UART_c67.c,47 :: 		
0x027E	0xF000C001  	MOVFF       R1, R0
;__Lib_UART_c67.c,48 :: 		
L_end_UART1_Read:
0x0282	0x0012      	RETURN      0
; end of _UART1_Read
_UART1_Data_Ready:
;__Lib_UART_c67.c,34 :: 		
;__Lib_UART_c67.c,35 :: 		
0x0284	0x0E00      	MOVLW       0
0x0286	0xBA9E      	BTFSC       PIR1, 5 
0x0288	0x0E01      	MOVLW       1
0x028A	0x6E00      	MOVWF       R0 
;__Lib_UART_c67.c,36 :: 		
L_end_UART1_Data_Ready:
0x028C	0x0012      	RETURN      0
; end of _UART1_Data_Ready
_stepper2Step12:
;CNC.c,153 :: 		void stepper2Step12()
;CNC.c,155 :: 		writeToStepper2(0b00110000);      //activating the first and second coils ... south and east so that the rolling part moves clock wisely
0x028E	0x0E30      	MOVLW       48
0x0290	0x0101      	MOVLB       1
0x0292	0x6F78      	MOVWF       FARG_writeToStepper2_newstep, 1
0x0294	0xDFE8      	RCALL       _writeToStepper2
;CNC.c,156 :: 		Uart1_Write_Text("Increment2");    //increment progress bar
0x0296	0x0E4C      	MOVLW       ?lstr13_CNC
0x0298	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x029A	0x0E00      	MOVLW       hi_addr(?lstr13_CNC)
0x029C	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x029E	0xDF63      	RCALL       _UART1_Write_Text
;CNC.c,157 :: 		writeLine();
0x02A0	0xDEFA      	RCALL       _writeLine
;CNC.c,158 :: 		stepper2LastStepDone = 1;
0x02A2	0x0E01      	MOVLW       1
0x02A4	0x6E3D      	MOVWF       _stepper2LastStepDone 
0x02A6	0x0E00      	MOVLW       0
0x02A8	0x6E3E      	MOVWF       _stepper2LastStepDone+1 
;CNC.c,159 :: 		VDelay_ms(stepper2Speed);
0x02AA	0xF178C03F  	MOVFF       _stepper2Speed, FARG_VDelay_ms_Time_ms
0x02AE	0xF179C040  	MOVFF       _stepper2Speed+1, FARG_VDelay_ms_Time_ms+1
0x02B2	0xDEFA      	RCALL       _VDelay_ms
;CNC.c,160 :: 		}
L_end_stepper2Step12:
0x02B4	0x0012      	RETURN      0
; end of _stepper2Step12
_getProperLastStepForCCW:
;CNC.c,359 :: 		int getProperLastStepForCCW(int lastStep)
;CNC.c,361 :: 		switch(lastStep)
0x02B6	0xD012      	BRA         L_getProperLastStepForCCW94
;CNC.c,363 :: 		case 1:
L_getProperLastStepForCCW96:
;CNC.c,364 :: 		return 0;
0x02B8	0x6A00      	CLRF        R0 
0x02BA	0x6A01      	CLRF        R1 
0x02BC	0xD028      	BRA         L_end_getProperLastStepForCCW
;CNC.c,366 :: 		case 2:
L_getProperLastStepForCCW97:
;CNC.c,367 :: 		return 3;
0x02BE	0x0E03      	MOVLW       3
0x02C0	0x6E00      	MOVWF       R0 
0x02C2	0x0E00      	MOVLW       0
0x02C4	0x6E01      	MOVWF       R1 
0x02C6	0xD023      	BRA         L_end_getProperLastStepForCCW
;CNC.c,369 :: 		case 3:
L_getProperLastStepForCCW98:
;CNC.c,370 :: 		return 2;
0x02C8	0x0E02      	MOVLW       2
0x02CA	0x6E00      	MOVWF       R0 
0x02CC	0x0E00      	MOVLW       0
0x02CE	0x6E01      	MOVWF       R1 
0x02D0	0xD01E      	BRA         L_end_getProperLastStepForCCW
;CNC.c,372 :: 		case 4:
L_getProperLastStepForCCW99:
;CNC.c,373 :: 		return 1;
0x02D2	0x0E01      	MOVLW       1
0x02D4	0x6E00      	MOVWF       R0 
0x02D6	0x0E00      	MOVLW       0
0x02D8	0x6E01      	MOVWF       R1 
0x02DA	0xD019      	BRA         L_end_getProperLastStepForCCW
;CNC.c,375 :: 		}
L_getProperLastStepForCCW94:
0x02DC	0x0E00      	MOVLW       0
0x02DE	0x0101      	MOVLB       1
0x02E0	0x1971      	XORWF       FARG_getProperLastStepForCCW_lastStep+1, 0, 1
0x02E2	0xE102      	BNZ         L__getProperLastStepForCCW172
0x02E4	0x0E01      	MOVLW       1
0x02E6	0x1970      	XORWF       FARG_getProperLastStepForCCW_lastStep, 0, 1
L__getProperLastStepForCCW172:
0x02E8	0xE0E7      	BZ          L_getProperLastStepForCCW96
0x02EA	0x0E00      	MOVLW       0
0x02EC	0x1971      	XORWF       FARG_getProperLastStepForCCW_lastStep+1, 0, 1
0x02EE	0xE102      	BNZ         L__getProperLastStepForCCW173
0x02F0	0x0E02      	MOVLW       2
0x02F2	0x1970      	XORWF       FARG_getProperLastStepForCCW_lastStep, 0, 1
L__getProperLastStepForCCW173:
0x02F4	0xE0E4      	BZ          L_getProperLastStepForCCW97
0x02F6	0x0E00      	MOVLW       0
0x02F8	0x1971      	XORWF       FARG_getProperLastStepForCCW_lastStep+1, 0, 1
0x02FA	0xE102      	BNZ         L__getProperLastStepForCCW174
0x02FC	0x0E03      	MOVLW       3
0x02FE	0x1970      	XORWF       FARG_getProperLastStepForCCW_lastStep, 0, 1
L__getProperLastStepForCCW174:
0x0300	0xE0E3      	BZ          L_getProperLastStepForCCW98
0x0302	0x0E00      	MOVLW       0
0x0304	0x1971      	XORWF       FARG_getProperLastStepForCCW_lastStep+1, 0, 1
0x0306	0xE102      	BNZ         L__getProperLastStepForCCW175
0x0308	0x0E04      	MOVLW       4
0x030A	0x1970      	XORWF       FARG_getProperLastStepForCCW_lastStep, 0, 1
L__getProperLastStepForCCW175:
0x030C	0xE0E2      	BZ          L_getProperLastStepForCCW99
;CNC.c,376 :: 		}
L_end_getProperLastStepForCCW:
0x030E	0x0012      	RETURN      0
; end of _getProperLastStepForCCW
_stepper1Step41:
;CNC.c,143 :: 		void stepper1Step41()
;CNC.c,145 :: 		writeToStepper1(0b00001001);       //forth and first
0x0310	0x0E09      	MOVLW       9
0x0312	0x0101      	MOVLB       1
0x0314	0x6F78      	MOVWF       FARG_writeToStepper1_newstep, 1
0x0316	0xDF75      	RCALL       _writeToStepper1
;CNC.c,146 :: 		Uart1_Write_Text("Increment1");    //increment progress bar
0x0318	0x0E41      	MOVLW       ?lstr12_CNC
0x031A	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x031C	0x0E00      	MOVLW       hi_addr(?lstr12_CNC)
0x031E	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0320	0xDF22      	RCALL       _UART1_Write_Text
;CNC.c,147 :: 		writeLine();
0x0322	0xDEB9      	RCALL       _writeLine
;CNC.c,148 :: 		stepper1LastStepDone = 1;
0x0324	0x0E01      	MOVLW       1
0x0326	0x0101      	MOVLB       1
0x0328	0x6F0C      	MOVWF       _stepper1LastStepDone, 1
0x032A	0x0E00      	MOVLW       0
0x032C	0x6F0D      	MOVWF       _stepper1LastStepDone+1, 1
;CNC.c,149 :: 		VDelay_ms(stepper1Speed);
0x032E	0xF178C10A  	MOVFF       _stepper1Speed, FARG_VDelay_ms_Time_ms
0x0332	0xF179C10B  	MOVFF       _stepper1Speed+1, FARG_VDelay_ms_Time_ms+1
0x0336	0xDEB8      	RCALL       _VDelay_ms
;CNC.c,150 :: 		}
L_end_stepper1Step41:
0x0338	0x0012      	RETURN      0
; end of _stepper1Step41
_stepper1Step34:
;CNC.c,134 :: 		void stepper1Step34()
;CNC.c,136 :: 		writeToStepper1(0b00001100);      //third and forth coils
0x033A	0x0E0C      	MOVLW       12
0x033C	0x0101      	MOVLB       1
0x033E	0x6F78      	MOVWF       FARG_writeToStepper1_newstep, 1
0x0340	0xDF60      	RCALL       _writeToStepper1
;CNC.c,137 :: 		Uart1_Write_Text("Increment1");    //increment progress bar
0x0342	0x0EB9      	MOVLW       ?lstr11_CNC
0x0344	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0346	0x0E00      	MOVLW       hi_addr(?lstr11_CNC)
0x0348	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x034A	0xDF0D      	RCALL       _UART1_Write_Text
;CNC.c,138 :: 		writeLine();
0x034C	0xDEA4      	RCALL       _writeLine
;CNC.c,139 :: 		stepper1LastStepDone = 1;
0x034E	0x0E01      	MOVLW       1
0x0350	0x0101      	MOVLB       1
0x0352	0x6F0C      	MOVWF       _stepper1LastStepDone, 1
0x0354	0x0E00      	MOVLW       0
0x0356	0x6F0D      	MOVWF       _stepper1LastStepDone+1, 1
;CNC.c,140 :: 		VDelay_ms(stepper1Speed);
0x0358	0xF178C10A  	MOVFF       _stepper1Speed, FARG_VDelay_ms_Time_ms
0x035C	0xF179C10B  	MOVFF       _stepper1Speed+1, FARG_VDelay_ms_Time_ms+1
0x0360	0xDEA3      	RCALL       _VDelay_ms
;CNC.c,141 :: 		}
L_end_stepper1Step34:
0x0362	0x0012      	RETURN      0
; end of _stepper1Step34
_stepper1Step23:
;CNC.c,125 :: 		void stepper1Step23()
;CNC.c,127 :: 		writeToStepper1(0b00000110);     //activating the second and third coils for the similar reason
0x0364	0x0E06      	MOVLW       6
0x0366	0x0101      	MOVLB       1
0x0368	0x6F78      	MOVWF       FARG_writeToStepper1_newstep, 1
0x036A	0xDF4B      	RCALL       _writeToStepper1
;CNC.c,128 :: 		Uart1_Write_Text("Increment1");    //increment progress bar
0x036C	0x0EF5      	MOVLW       ?lstr10_CNC
0x036E	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0370	0x0E00      	MOVLW       hi_addr(?lstr10_CNC)
0x0372	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0374	0xDEF8      	RCALL       _UART1_Write_Text
;CNC.c,129 :: 		writeLine();
0x0376	0xDE8F      	RCALL       _writeLine
;CNC.c,130 :: 		stepper1LastStepDone = 1;
0x0378	0x0E01      	MOVLW       1
0x037A	0x0101      	MOVLB       1
0x037C	0x6F0C      	MOVWF       _stepper1LastStepDone, 1
0x037E	0x0E00      	MOVLW       0
0x0380	0x6F0D      	MOVWF       _stepper1LastStepDone+1, 1
;CNC.c,131 :: 		VDelay_ms(stepper1Speed);
0x0382	0xF178C10A  	MOVFF       _stepper1Speed, FARG_VDelay_ms_Time_ms
0x0386	0xF179C10B  	MOVFF       _stepper1Speed+1, FARG_VDelay_ms_Time_ms+1
0x038A	0xDE8E      	RCALL       _VDelay_ms
;CNC.c,132 :: 		}
L_end_stepper1Step23:
0x038C	0x0012      	RETURN      0
; end of _stepper1Step23
_stepper2Step41:
;CNC.c,180 :: 		void stepper2Step41()
;CNC.c,182 :: 		writeToStepper2(0b10010000);       //forth and first
0x038E	0x0E90      	MOVLW       144
0x0390	0x0101      	MOVLB       1
0x0392	0x6F78      	MOVWF       FARG_writeToStepper2_newstep, 1
0x0394	0xDF68      	RCALL       _writeToStepper2
;CNC.c,183 :: 		Uart1_Write_Text("Increment2");    //increment progress bar
0x0396	0x0E32      	MOVLW       ?lstr16_CNC
0x0398	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x039A	0x0E00      	MOVLW       hi_addr(?lstr16_CNC)
0x039C	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x039E	0xDEE3      	RCALL       _UART1_Write_Text
;CNC.c,184 :: 		writeLine();
0x03A0	0xDE7A      	RCALL       _writeLine
;CNC.c,185 :: 		stepper2LastStepDone = 1;
0x03A2	0x0E01      	MOVLW       1
0x03A4	0x6E3D      	MOVWF       _stepper2LastStepDone 
0x03A6	0x0E00      	MOVLW       0
0x03A8	0x6E3E      	MOVWF       _stepper2LastStepDone+1 
;CNC.c,186 :: 		VDelay_ms(stepper2Speed);
0x03AA	0xF178C03F  	MOVFF       _stepper2Speed, FARG_VDelay_ms_Time_ms
0x03AE	0xF179C040  	MOVFF       _stepper2Speed+1, FARG_VDelay_ms_Time_ms+1
0x03B2	0xDE7A      	RCALL       _VDelay_ms
;CNC.c,187 :: 		}
L_end_stepper2Step41:
0x03B4	0x0012      	RETURN      0
; end of _stepper2Step41
_Div_16x16_S:
;__Lib_Math.c,200 :: 		
;__Lib_Math.c,208 :: 		
0x03B6	0x5004      	MOVF        R4, 0 
0x03B8	0x0A00      	XORLW       0
0x03BA	0xE108      	BNZ         L_Div_16x16_S0
;__Lib_Math.c,209 :: 		
0x03BC	0x5005      	MOVF        R5, 0 
0x03BE	0x0A00      	XORLW       0
0x03C0	0xE105      	BNZ         L_Div_16x16_S1
;__Lib_Math.c,210 :: 		
0x03C2	0x0EFF      	MOVLW       255
0x03C4	0x6E00      	MOVWF       R0 
;__Lib_Math.c,211 :: 		
0x03C6	0x0E7F      	MOVLW       127
0x03C8	0x6E01      	MOVWF       R1 
;__Lib_Math.c,212 :: 		
0x03CA	0xD057      	BRA         L_end_Div_16x16_S
;__Lib_Math.c,213 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,216 :: 		
0x03CC	0x6A0D      	CLRF        R13, 0
;__Lib_Math.c,217 :: 		
0x03CE	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,218 :: 		
0x03D0	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,219 :: 		
0x03D2	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,220 :: 		
0x03D4	0x1000      	IORWF       R0, 0, 0
;__Lib_Math.c,221 :: 		
0x03D6	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,222 :: 		
0x03D8	0x0C00      	RETLW       0
;__Lib_Math.c,224 :: 		
0x03DA	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,225 :: 		
0x03DC	0x1805      	XORWF       R5, 0, 0
;__Lib_Math.c,226 :: 		
0x03DE	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,227 :: 		
0x03E0	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,228 :: 		
0x03E2	0x1E0D      	COMF        R13, 1, 0
;__Lib_Math.c,230 :: 		
0x03E4	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,232 :: 		
0x03E6	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,233 :: 		
0x03E8	0xD005      	BRA         $+12
;__Lib_Math.c,235 :: 		
0x03EA	0x1E04      	COMF        R4, 1, 0
;__Lib_Math.c,236 :: 		
0x03EC	0x1E05      	COMF        R5, 1, 0
;__Lib_Math.c,237 :: 		
0x03EE	0x2A04      	INCF        R4, 1, 0
;__Lib_Math.c,238 :: 		
0x03F0	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,239 :: 		
0x03F2	0x2A05      	INCF        R5, 1, 0
;__Lib_Math.c,241 :: 		
0x03F4	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,242 :: 		
0x03F6	0xD005      	BRA         $+12
;__Lib_Math.c,244 :: 		
0x03F8	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,245 :: 		
0x03FA	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,246 :: 		
0x03FC	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,247 :: 		
0x03FE	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,248 :: 		
0x0400	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,250 :: 		
0x0402	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,251 :: 		
0x0404	0x1005      	IORWF       R5, 0, 0
;__Lib_Math.c,252 :: 		
0x0406	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,253 :: 		
0x0408	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,254 :: 		
0x040A	0xD010      	BRA         $+34
;__Lib_Math.c,256 :: 		
0x040C	0xDF00      	RCALL       _Div_16x16_S_L
;__Lib_Math.c,258 :: 		
0x040E	0xB00B      	BTFSC       R11, 0, 0
;__Lib_Math.c,259 :: 		
0x0410	0xD020      	BRA         $+66
;__Lib_Math.c,261 :: 		
0x0412	0xAE0D      	BTFSS       R13, 7, 0
;__Lib_Math.c,262 :: 		
0x0414	0x0C00      	RETLW       0
;__Lib_Math.c,264 :: 		
0x0416	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,265 :: 		
0x0418	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,266 :: 		
0x041A	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,267 :: 		
0x041C	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,268 :: 		
0x041E	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,270 :: 		
0x0420	0x1E08      	COMF        R8, 1, 0
;__Lib_Math.c,271 :: 		
0x0422	0x1E09      	COMF        R9, 1, 0
;__Lib_Math.c,272 :: 		
0x0424	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,273 :: 		
0x0426	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,274 :: 		
0x0428	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,276 :: 		
0x042A	0x0C00      	RETLW       0
;__Lib_Math.c,278 :: 		
0x042C	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,279 :: 		
0x042E	0xD00D      	BRA         $+28
;__Lib_Math.c,280 :: 		
0x0430	0xBE01      	BTFSC       R1, 7, 0
;__Lib_Math.c,281 :: 		
0x0432	0xD007      	BRA         $+16
;__Lib_Math.c,282 :: 		
0x0434	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,283 :: 		
0x0436	0x6E09      	MOVWF       R9, 0
;__Lib_Math.c,284 :: 		
0x0438	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,285 :: 		
0x043A	0x6E08      	MOVWF       R8, 0
;__Lib_Math.c,286 :: 		
0x043C	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,287 :: 		
0x043E	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,288 :: 		
0x0440	0xD7E8      	BRA         $-46
;__Lib_Math.c,289 :: 		
0x0442	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,290 :: 		
0x0444	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,291 :: 		
0x0446	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,292 :: 		
0x0448	0x0C00      	RETLW       0
;__Lib_Math.c,294 :: 		
0x044A	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,295 :: 		
0x044C	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,296 :: 		
0x044E	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,297 :: 		
0x0450	0xD7DD      	BRA         $-68
;__Lib_Math.c,299 :: 		
0x0452	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,300 :: 		
0x0454	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,301 :: 		
0x0456	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,302 :: 		
0x0458	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,303 :: 		
0x045A	0x5C08      	SUBWF       R8, 0, 0
;__Lib_Math.c,304 :: 		
0x045C	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,305 :: 		
0x045E	0xD7D9      	BRA         $-76
;__Lib_Math.c,306 :: 		
0x0460	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,307 :: 		
0x0462	0x5C09      	SUBWF       R9, 0, 0
;__Lib_Math.c,308 :: 		
0x0464	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,309 :: 		
0x0466	0xD7D5      	BRA         $-84
;__Lib_Math.c,310 :: 		
0x0468	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,311 :: 		
0x046A	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,312 :: 		
0x046C	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,313 :: 		
0x046E	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,314 :: 		
0x0470	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,315 :: 		
0x0472	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,316 :: 		
0x0474	0xD7CE      	BRA         $-98
;__Lib_Math.c,317 :: 		
0x0476	0x0000      	NOP
;__Lib_Math.c,318 :: 		
0x0478	0x0CFF      	RETLW       255
;__Lib_Math.c,320 :: 		
L_end_Div_16x16_S:
0x047A	0x0012      	RETURN      0
; end of _Div_16x16_S
_UART1_Read_Text:
;__Lib_UART_c67.c,78 :: 		
;__Lib_UART_c67.c,79 :: 		
0x047C	0x0101      	MOVLB       1
0x047E	0x6B76      	CLRF        UART1_Read_Text_out_idx_L0, 1
0x0480	0x6B77      	CLRF        UART1_Read_Text_delim_idx_L0, 1
;__Lib_UART_c67.c,81 :: 		
L_UART1_Read_Text7:
0x0482	0x5374      	MOVF        FARG_UART1_Read_Text_Attempts, 1, 1
0x0484	0xE042      	BZ          L_UART1_Read_Text8
;__Lib_UART_c67.c,83 :: 		
0x0486	0x5174      	MOVF        FARG_UART1_Read_Text_Attempts, 0, 1
0x0488	0x0AFF      	XORLW       255
0x048A	0xA4D8      	BTFSS       STATUS, 2 
;__Lib_UART_c67.c,84 :: 		
0x048C	0x0774      	DECF        FARG_UART1_Read_Text_Attempts, 1, 1
L_UART1_Read_Text9:
;__Lib_UART_c67.c,86 :: 		
L_UART1_Read_Text10:
0x048E	0xDEFA      	RCALL       _UART1_Data_Ready
0x0490	0x5000      	MOVF        R0, 0 
0x0492	0x0A00      	XORLW       0
0x0494	0xE101      	BNZ         L_UART1_Read_Text11
;__Lib_UART_c67.c,87 :: 		
0x0496	0xD7FB      	BRA         L_UART1_Read_Text10
L_UART1_Read_Text11:
;__Lib_UART_c67.c,89 :: 		
0x0498	0xDEEC      	RCALL       _UART1_Read
0x049A	0xF175C000  	MOVFF       R0, UART1_Read_Text_r_data_L0
;__Lib_UART_c67.c,90 :: 		
0x049E	0x0101      	MOVLB       1
0x04A0	0x5176      	MOVF        UART1_Read_Text_out_idx_L0, 0, 1
0x04A2	0x2570      	ADDWF       FARG_UART1_Read_Text_Output, 0, 1
0x04A4	0x6EE1      	MOVWF       FSR1L 
0x04A6	0x0E00      	MOVLW       0
0x04A8	0x2171      	ADDWFC      FARG_UART1_Read_Text_Output+1, 0, 1
0x04AA	0x6EE2      	MOVWF       FSR1H 
0x04AC	0xFFE6C000  	MOVFF       R0, POSTINC1
0x04B0	0x2B76      	INCF        UART1_Read_Text_out_idx_L0, 1, 1
;__Lib_UART_c67.c,91 :: 		
0x04B2	0x5177      	MOVF        UART1_Read_Text_delim_idx_L0, 0, 1
0x04B4	0x2572      	ADDWF       FARG_UART1_Read_Text_Delimiter, 0, 1
0x04B6	0x6EE9      	MOVWF       FSR0L 
0x04B8	0x0E00      	MOVLW       0
0x04BA	0x2173      	ADDWFC      FARG_UART1_Read_Text_Delimiter+1, 0, 1
0x04BC	0x6EEA      	MOVWF       FSR0H 
0x04BE	0x50EE      	MOVF        POSTINC0, 0 
0x04C0	0x1975      	XORWF       UART1_Read_Text_r_data_L0, 0, 1
0x04C2	0xE102      	BNZ         L_UART1_Read_Text12
;__Lib_UART_c67.c,92 :: 		
0x04C4	0x2B77      	INCF        UART1_Read_Text_delim_idx_L0, 1, 1
;__Lib_UART_c67.c,93 :: 		
0x04C6	0xD009      	BRA         L_UART1_Read_Text13
L_UART1_Read_Text12:
;__Lib_UART_c67.c,95 :: 		
0x04C8	0x6B77      	CLRF        UART1_Read_Text_delim_idx_L0, 1
;__Lib_UART_c67.c,96 :: 		
0x04CA	0xFFE9C172  	MOVFF       FARG_UART1_Read_Text_Delimiter, FSR0L
0x04CE	0xFFEAC173  	MOVFF       FARG_UART1_Read_Text_Delimiter+1, FSR0H
0x04D2	0x50EE      	MOVF        POSTINC0, 0 
0x04D4	0x1975      	XORWF       UART1_Read_Text_r_data_L0, 0, 1
0x04D6	0xB4D8      	BTFSC       STATUS, 2 
;__Lib_UART_c67.c,97 :: 		
0x04D8	0x2B77      	INCF        UART1_Read_Text_delim_idx_L0, 1, 1
;__Lib_UART_c67.c,98 :: 		
L_UART1_Read_Text14:
;__Lib_UART_c67.c,99 :: 		
L_UART1_Read_Text13:
;__Lib_UART_c67.c,101 :: 		
0x04DA	0x5177      	MOVF        UART1_Read_Text_delim_idx_L0, 0, 1
0x04DC	0x2572      	ADDWF       FARG_UART1_Read_Text_Delimiter, 0, 1
0x04DE	0x6EE9      	MOVWF       FSR0L 
0x04E0	0x0E00      	MOVLW       0
0x04E2	0x2173      	ADDWFC      FARG_UART1_Read_Text_Delimiter+1, 0, 1
0x04E4	0x6EEA      	MOVWF       FSR0H 
0x04E6	0x50EE      	MOVF        POSTINC0, 0 
0x04E8	0x0A00      	XORLW       0
0x04EA	0xE10E      	BNZ         L_UART1_Read_Text15
;__Lib_UART_c67.c,102 :: 		
0x04EC	0x5177      	MOVF        UART1_Read_Text_delim_idx_L0, 0, 1
0x04EE	0x5D76      	SUBWF       UART1_Read_Text_out_idx_L0, 0, 1
0x04F0	0x6E00      	MOVWF       R0 
0x04F2	0x6A01      	CLRF        R1 
0x04F4	0x0E00      	MOVLW       0
0x04F6	0x5A01      	SUBWFB      R1, 1 
0x04F8	0x5000      	MOVF        R0, 0 
0x04FA	0x2570      	ADDWF       FARG_UART1_Read_Text_Output, 0, 1
0x04FC	0x6EE1      	MOVWF       FSR1L 
0x04FE	0x5001      	MOVF        R1, 0 
0x0500	0x2171      	ADDWFC      FARG_UART1_Read_Text_Output+1, 0, 1
0x0502	0x6EE2      	MOVWF       FSR1H 
0x0504	0x6AE6      	CLRF        POSTINC1 
;__Lib_UART_c67.c,103 :: 		
0x0506	0xD006      	BRA         L_end_UART1_Read_Text
;__Lib_UART_c67.c,104 :: 		
L_UART1_Read_Text15:
;__Lib_UART_c67.c,106 :: 		
0x0508	0xD7BC      	BRA         L_UART1_Read_Text7
L_UART1_Read_Text8:
;__Lib_UART_c67.c,107 :: 		
0x050A	0xFFE1C170  	MOVFF       FARG_UART1_Read_Text_Output, FSR1L
0x050E	0xFFE2C171  	MOVFF       FARG_UART1_Read_Text_Output+1, FSR1H
0x0512	0x6AE6      	CLRF        POSTINC1 
;__Lib_UART_c67.c,108 :: 		
L_end_UART1_Read_Text:
0x0514	0x0012      	RETURN      0
; end of _UART1_Read_Text
_atoi:
;__Lib_CStdlib.c,181 :: 		
;__Lib_CStdlib.c,186 :: 		
___atoi_skipws_atoi:
;__Lib_CStdlib.c,187 :: 		
0x0516	0xFFE9C170  	MOVFF       FARG_atoi_s, FSR0L
0x051A	0xFFEAC171  	MOVFF       FARG_atoi_s+1, FSR0H
0x051E	0xF172CFEE  	MOVFF       POSTINC0, atoi_c_L0
0x0522	0x0E00      	MOVLW       0
0x0524	0x0101      	MOVLB       1
0x0526	0x6F73      	MOVWF       atoi_c_L0+1, 1
0x0528	0x0E00      	MOVLW       0
0x052A	0x6F73      	MOVWF       atoi_c_L0+1, 1
;__Lib_CStdlib.c,188 :: 		
0x052C	0x0E00      	MOVLW       0
0x052E	0x1973      	XORWF       atoi_c_L0+1, 0, 1
0x0530	0xE102      	BNZ         L__atoi100
0x0532	0x0E20      	MOVLW       32
0x0534	0x1972      	XORWF       atoi_c_L0, 0, 1
L__atoi100:
0x0536	0xE007      	BZ          L__atoi90
0x0538	0x0E00      	MOVLW       0
0x053A	0x1973      	XORWF       atoi_c_L0+1, 0, 1
0x053C	0xE102      	BNZ         L__atoi101
0x053E	0x0E09      	MOVLW       9
0x0540	0x1972      	XORWF       atoi_c_L0, 0, 1
L__atoi101:
0x0542	0xE001      	BZ          L__atoi90
0x0544	0xD003      	BRA         L_atoi55
L__atoi90:
;__Lib_CStdlib.c,189 :: 		
0x0546	0x4B70      	INFSNZ      FARG_atoi_s, 1, 1
0x0548	0x2B71      	INCF        FARG_atoi_s+1, 1, 1
;__Lib_CStdlib.c,190 :: 		
0x054A	0xD7E5      	BRA         ___atoi_skipws_atoi
;__Lib_CStdlib.c,191 :: 		
L_atoi55:
;__Lib_CStdlib.c,192 :: 		
0x054C	0x6B74      	CLRF        atoi_a_L0, 1
0x054E	0x6B75      	CLRF        atoi_a_L0+1, 1
;__Lib_CStdlib.c,193 :: 		
0x0550	0x6B76      	CLRF        atoi_sign_L0, 1
0x0552	0x6B77      	CLRF        atoi_sign_L0+1, 1
;__Lib_CStdlib.c,194 :: 		
0x0554	0x0E00      	MOVLW       0
0x0556	0x1973      	XORWF       atoi_c_L0+1, 0, 1
0x0558	0xE102      	BNZ         L__atoi102
0x055A	0x0E2D      	MOVLW       45
0x055C	0x1972      	XORWF       atoi_c_L0, 0, 1
L__atoi102:
0x055E	0xE105      	BNZ         L_atoi56
;__Lib_CStdlib.c,195 :: 		
0x0560	0x4B76      	INFSNZ      atoi_sign_L0, 1, 1
0x0562	0x2B77      	INCF        atoi_sign_L0+1, 1, 1
;__Lib_CStdlib.c,196 :: 		
0x0564	0x4B70      	INFSNZ      FARG_atoi_s, 1, 1
0x0566	0x2B71      	INCF        FARG_atoi_s+1, 1, 1
;__Lib_CStdlib.c,197 :: 		
0x0568	0xD008      	BRA         L_atoi57
L_atoi56:
;__Lib_CStdlib.c,199 :: 		
0x056A	0x0E00      	MOVLW       0
0x056C	0x1973      	XORWF       atoi_c_L0+1, 0, 1
0x056E	0xE102      	BNZ         L__atoi103
0x0570	0x0E2B      	MOVLW       43
0x0572	0x1972      	XORWF       atoi_c_L0, 0, 1
L__atoi103:
0x0574	0xE102      	BNZ         L_atoi58
;__Lib_CStdlib.c,200 :: 		
0x0576	0x4B70      	INFSNZ      FARG_atoi_s, 1, 1
0x0578	0x2B71      	INCF        FARG_atoi_s+1, 1, 1
L_atoi58:
L_atoi57:
;__Lib_CStdlib.c,201 :: 		
___atoi_conv_atoi:
;__Lib_CStdlib.c,202 :: 		
0x057A	0xFFE9C170  	MOVFF       FARG_atoi_s, FSR0L
0x057E	0xFFEAC171  	MOVFF       FARG_atoi_s+1, FSR0H
0x0582	0xF172CFEE  	MOVFF       POSTINC0, atoi_c_L0
0x0586	0x0E00      	MOVLW       0
0x0588	0x6F73      	MOVWF       atoi_c_L0+1, 1
0x058A	0x0E00      	MOVLW       0
0x058C	0x6F73      	MOVWF       atoi_c_L0+1, 1
;__Lib_CStdlib.c,203 :: 		
0x058E	0xF178C172  	MOVFF       atoi_c_L0, FARG_isdigit_character
0x0592	0xDE2B      	RCALL       _isdigit
0x0594	0x5200      	MOVF        R0, 1 
0x0596	0xE018      	BZ          L_atoi59
;__Lib_CStdlib.c,204 :: 		
0x0598	0xF000C174  	MOVFF       atoi_a_L0, R0
0x059C	0xF001C175  	MOVFF       atoi_a_L0+1, R1
0x05A0	0x0E0A      	MOVLW       10
0x05A2	0x6E04      	MOVWF       R4 
0x05A4	0x0E00      	MOVLW       0
0x05A6	0x6E05      	MOVWF       R5 
0x05A8	0xDDF8      	RCALL       _Mul_16X16_U
0x05AA	0x0E30      	MOVLW       48
0x05AC	0x5D72      	SUBWF       atoi_c_L0, 0, 1
0x05AE	0x6E02      	MOVWF       R2 
0x05B0	0x0E00      	MOVLW       0
0x05B2	0x5973      	SUBWFB      atoi_c_L0+1, 0, 1
0x05B4	0x6E03      	MOVWF       R3 
0x05B6	0x5002      	MOVF        R2, 0 
0x05B8	0x2400      	ADDWF       R0, 0 
0x05BA	0x6F74      	MOVWF       atoi_a_L0, 1
0x05BC	0x5003      	MOVF        R3, 0 
0x05BE	0x2001      	ADDWFC      R1, 0 
0x05C0	0x6F75      	MOVWF       atoi_a_L0+1, 1
;__Lib_CStdlib.c,205 :: 		
0x05C2	0x4B70      	INFSNZ      FARG_atoi_s, 1, 1
0x05C4	0x2B71      	INCF        FARG_atoi_s+1, 1, 1
;__Lib_CStdlib.c,206 :: 		
0x05C6	0xD7D9      	BRA         ___atoi_conv_atoi
;__Lib_CStdlib.c,207 :: 		
L_atoi59:
;__Lib_CStdlib.c,208 :: 		
0x05C8	0x5176      	MOVF        atoi_sign_L0, 0, 1
0x05CA	0x1177      	IORWF       atoi_sign_L0+1, 0, 1
0x05CC	0xE008      	BZ          L_atoi60
;__Lib_CStdlib.c,209 :: 		
0x05CE	0x5174      	MOVF        atoi_a_L0, 0, 1
0x05D0	0x0800      	SUBLW       0
0x05D2	0x6E00      	MOVWF       R0 
0x05D4	0xF001C175  	MOVFF       atoi_a_L0+1, R1
0x05D8	0x0E00      	MOVLW       0
0x05DA	0x5601      	SUBFWB      R1, 1 
0x05DC	0xD004      	BRA         L_end_atoi
L_atoi60:
;__Lib_CStdlib.c,210 :: 		
0x05DE	0xF000C174  	MOVFF       atoi_a_L0, R0
0x05E2	0xF001C175  	MOVFF       atoi_a_L0+1, R1
;__Lib_CStdlib.c,211 :: 		
L_end_atoi:
0x05E6	0x0012      	RETURN      0
; end of _atoi
_stepper2Step23:
;CNC.c,162 :: 		void stepper2Step23()
;CNC.c,164 :: 		writeToStepper2(0b01100000);     //activating the second and third coils for the similar reason
0x05E8	0x0E60      	MOVLW       96
0x05EA	0x0101      	MOVLB       1
0x05EC	0x6F78      	MOVWF       FARG_writeToStepper2_newstep, 1
0x05EE	0xDE3B      	RCALL       _writeToStepper2
;CNC.c,165 :: 		Uart1_Write_Text("Increment2");    //increment progress bar
0x05F0	0x0EC4      	MOVLW       ?lstr14_CNC
0x05F2	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x05F4	0x0E00      	MOVLW       hi_addr(?lstr14_CNC)
0x05F6	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x05F8	0xDDB6      	RCALL       _UART1_Write_Text
;CNC.c,166 :: 		writeLine();
0x05FA	0xDD4D      	RCALL       _writeLine
;CNC.c,167 :: 		stepper2LastStepDone = 1;
0x05FC	0x0E01      	MOVLW       1
0x05FE	0x6E3D      	MOVWF       _stepper2LastStepDone 
0x0600	0x0E00      	MOVLW       0
0x0602	0x6E3E      	MOVWF       _stepper2LastStepDone+1 
;CNC.c,168 :: 		VDelay_ms(stepper2Speed);
0x0604	0xF178C03F  	MOVFF       _stepper2Speed, FARG_VDelay_ms_Time_ms
0x0608	0xF179C040  	MOVFF       _stepper2Speed+1, FARG_VDelay_ms_Time_ms+1
0x060C	0xDD4D      	RCALL       _VDelay_ms
;CNC.c,169 :: 		}
L_end_stepper2Step23:
0x060E	0x0012      	RETURN      0
; end of _stepper2Step23
_stepper1Step12:
;CNC.c,116 :: 		void stepper1Step12()
;CNC.c,118 :: 		writeToStepper1(0b00000011);      //activating the first and second coils ... south and east so that the rolling part moves clock wisely
0x0610	0x0E03      	MOVLW       3
0x0612	0x0101      	MOVLB       1
0x0614	0x6F78      	MOVWF       FARG_writeToStepper1_newstep, 1
0x0616	0xDDF5      	RCALL       _writeToStepper1
;CNC.c,119 :: 		Uart1_Write_Text("Increment1");    //increment progress bar
0x0618	0x0EDE      	MOVLW       ?lstr9_CNC
0x061A	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x061C	0x0E00      	MOVLW       hi_addr(?lstr9_CNC)
0x061E	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0620	0xDDA2      	RCALL       _UART1_Write_Text
;CNC.c,120 :: 		writeLine();
0x0622	0xDD39      	RCALL       _writeLine
;CNC.c,121 :: 		stepper1LastStepDone = 1;
0x0624	0x0E01      	MOVLW       1
0x0626	0x0101      	MOVLB       1
0x0628	0x6F0C      	MOVWF       _stepper1LastStepDone, 1
0x062A	0x0E00      	MOVLW       0
0x062C	0x6F0D      	MOVWF       _stepper1LastStepDone+1, 1
;CNC.c,122 :: 		VDelay_ms(stepper1Speed);
0x062E	0xF178C10A  	MOVFF       _stepper1Speed, FARG_VDelay_ms_Time_ms
0x0632	0xF179C10B  	MOVFF       _stepper1Speed+1, FARG_VDelay_ms_Time_ms+1
0x0636	0xDD38      	RCALL       _VDelay_ms
;CNC.c,123 :: 		}
L_end_stepper1Step12:
0x0638	0x0012      	RETURN      0
; end of _stepper1Step12
_stepper2Step34:
;CNC.c,171 :: 		void stepper2Step34()
;CNC.c,173 :: 		writeToStepper2(0b11000000);      //third and forth coils
0x063A	0x0EC0      	MOVLW       192
0x063C	0x0101      	MOVLB       1
0x063E	0x6F78      	MOVWF       FARG_writeToStepper2_newstep, 1
0x0640	0xDE12      	RCALL       _writeToStepper2
;CNC.c,174 :: 		Uart1_Write_Text("Increment2");    //increment progress bar
0x0642	0x0ECF      	MOVLW       ?lstr15_CNC
0x0644	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0646	0x0E00      	MOVLW       hi_addr(?lstr15_CNC)
0x0648	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x064A	0xDD8D      	RCALL       _UART1_Write_Text
;CNC.c,175 :: 		writeLine();
0x064C	0xDD24      	RCALL       _writeLine
;CNC.c,176 :: 		stepper2LastStepDone = 1;
0x064E	0x0E01      	MOVLW       1
0x0650	0x6E3D      	MOVWF       _stepper2LastStepDone 
0x0652	0x0E00      	MOVLW       0
0x0654	0x6E3E      	MOVWF       _stepper2LastStepDone+1 
;CNC.c,177 :: 		VDelay_ms(stepper2Speed);
0x0656	0xF178C03F  	MOVFF       _stepper2Speed, FARG_VDelay_ms_Time_ms
0x065A	0xF179C040  	MOVFF       _stepper2Speed+1, FARG_VDelay_ms_Time_ms+1
0x065E	0xDD24      	RCALL       _VDelay_ms
;CNC.c,178 :: 		}
L_end_stepper2Step34:
0x0660	0x0012      	RETURN      0
; end of _stepper2Step34
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0662	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0664	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0668	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x066A	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x066C	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x066E	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0670	0x0012      	RETURN      0
; end of ___CC2DW
_getStepper1Settings:
;CNC.c,378 :: 		void getStepper1Settings()
;CNC.c,380 :: 		UART1_Write_Text("Direction1");    //Order direction from pc
0x0672	0x0E62      	MOVLW       ?lstr21_CNC
0x0674	0x0101      	MOVLB       1
0x0676	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0678	0x0E00      	MOVLW       hi_addr(?lstr21_CNC)
0x067A	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x067C	0xDD74      	RCALL       _UART1_Write_Text
;CNC.c,381 :: 		writeLine();
0x067E	0xDD0B      	RCALL       _writeLine
;CNC.c,383 :: 		while(UART1_Data_Ready() != 1);     //wait until pc sends direction
L_getStepper1Settings100:
0x0680	0xDE01      	RCALL       _UART1_Data_Ready
0x0682	0x5000      	MOVF        R0, 0 
0x0684	0x0A01      	XORLW       1
0x0686	0xE001      	BZ          L_getStepper1Settings101
0x0688	0xD7FB      	BRA         L_getStepper1Settings100
L_getStepper1Settings101:
;CNC.c,384 :: 		UART1_Read_Text(stepper1Direction , "!ok" , 10);   //get direction
0x068A	0x0E29      	MOVLW       _stepper1Direction
0x068C	0x0101      	MOVLB       1
0x068E	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x0690	0x0E01      	MOVLW       hi_addr(_stepper1Direction)
0x0692	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x0694	0x0E57      	MOVLW       ?lstr22_CNC
0x0696	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x0698	0x0E00      	MOVLW       hi_addr(?lstr22_CNC)
0x069A	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x069C	0x0E0A      	MOVLW       10
0x069E	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x06A0	0xDEED      	RCALL       _UART1_Read_Text
;CNC.c,386 :: 		UART1_Write_Text("Speed1");     //order speed from pc
0x06A2	0x0E5B      	MOVLW       ?lstr23_CNC
0x06A4	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x06A6	0x0E00      	MOVLW       hi_addr(?lstr23_CNC)
0x06A8	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x06AA	0xDD5D      	RCALL       _UART1_Write_Text
;CNC.c,387 :: 		writeLine();
0x06AC	0xDCF4      	RCALL       _writeLine
;CNC.c,389 :: 		while(UART1_Data_Ready() != 1);     //wait until pc sends speed
L_getStepper1Settings102:
0x06AE	0xDDEA      	RCALL       _UART1_Data_Ready
0x06B0	0x5000      	MOVF        R0, 0 
0x06B2	0x0A01      	XORLW       1
0x06B4	0xE001      	BZ          L_getStepper1Settings103
0x06B6	0xD7FB      	BRA         L_getStepper1Settings102
L_getStepper1Settings103:
;CNC.c,390 :: 		UART1_Read_Text(stepper1SpeedString , "!ok" , 10);   //get speed
0x06B8	0x0E1F      	MOVLW       _stepper1SpeedString
0x06BA	0x0101      	MOVLB       1
0x06BC	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x06BE	0x0E01      	MOVLW       hi_addr(_stepper1SpeedString)
0x06C0	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x06C2	0x0E1E      	MOVLW       ?lstr24_CNC
0x06C4	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x06C6	0x0E00      	MOVLW       hi_addr(?lstr24_CNC)
0x06C8	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x06CA	0x0E0A      	MOVLW       10
0x06CC	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x06CE	0xDED6      	RCALL       _UART1_Read_Text
;CNC.c,391 :: 		stepper1Speed = atoi(stepper1SpeedString);       //convert speedString to integer
0x06D0	0x0E1F      	MOVLW       _stepper1SpeedString
0x06D2	0x6F70      	MOVWF       FARG_atoi_s, 1
0x06D4	0x0E01      	MOVLW       hi_addr(_stepper1SpeedString)
0x06D6	0x6F71      	MOVWF       FARG_atoi_s+1, 1
0x06D8	0xDF1E      	RCALL       _atoi
0x06DA	0xF10AC000  	MOVFF       R0, _stepper1Speed
0x06DE	0xF10BC001  	MOVFF       R1, _stepper1Speed+1
;CNC.c,392 :: 		stepper1Speed = 1050 - stepper1Speed * 10;      //Map the speed to a proper delay time
0x06E2	0x0E0A      	MOVLW       10
0x06E4	0x6E04      	MOVWF       R4 
0x06E6	0x0E00      	MOVLW       0
0x06E8	0x6E05      	MOVWF       R5 
0x06EA	0xDD57      	RCALL       _Mul_16X16_U
0x06EC	0x5000      	MOVF        R0, 0 
0x06EE	0x081A      	SUBLW       26
0x06F0	0x6F0A      	MOVWF       _stepper1Speed, 1
0x06F2	0xF10BC001  	MOVFF       R1, _stepper1Speed+1
0x06F6	0x0E04      	MOVLW       4
0x06F8	0x570B      	SUBFWB      _stepper1Speed+1, 1, 1
;CNC.c,394 :: 		UART1_Write_Text("Steps1");      //order steps from pc
0x06FA	0x0E17      	MOVLW       ?lstr25_CNC
0x06FC	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x06FE	0x0E00      	MOVLW       hi_addr(?lstr25_CNC)
0x0700	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0702	0xDD31      	RCALL       _UART1_Write_Text
;CNC.c,395 :: 		writeLine();
0x0704	0xDCC8      	RCALL       _writeLine
;CNC.c,397 :: 		while(UART1_Data_Ready() != 1);     //wait until pc sends number of steps
L_getStepper1Settings104:
0x0706	0xDDBE      	RCALL       _UART1_Data_Ready
0x0708	0x5000      	MOVF        R0, 0 
0x070A	0x0A01      	XORLW       1
0x070C	0xE001      	BZ          L_getStepper1Settings105
0x070E	0xD7FB      	BRA         L_getStepper1Settings104
L_getStepper1Settings105:
;CNC.c,398 :: 		UART1_Read_Text(stepper1StepsString , "!ok" , 10);   //get steps
0x0710	0x0E15      	MOVLW       _stepper1StepsString
0x0712	0x0101      	MOVLB       1
0x0714	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x0716	0x0E01      	MOVLW       hi_addr(_stepper1StepsString)
0x0718	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x071A	0x0E2E      	MOVLW       ?lstr26_CNC
0x071C	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x071E	0x0E00      	MOVLW       hi_addr(?lstr26_CNC)
0x0720	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x0722	0x0E0A      	MOVLW       10
0x0724	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x0726	0xDEAA      	RCALL       _UART1_Read_Text
;CNC.c,399 :: 		stepper1Steps = atoi(stepper1StepsString);
0x0728	0x0E15      	MOVLW       _stepper1StepsString
0x072A	0x6F70      	MOVWF       FARG_atoi_s, 1
0x072C	0x0E01      	MOVLW       hi_addr(_stepper1StepsString)
0x072E	0x6F71      	MOVWF       FARG_atoi_s+1, 1
0x0730	0xDEF2      	RCALL       _atoi
0x0732	0xF0F3C000  	MOVFF       R0, _stepper1Steps
0x0736	0xF0F4C001  	MOVFF       R1, _stepper1Steps+1
;CNC.c,400 :: 		}
L_end_getStepper1Settings:
0x073A	0x0012      	RETURN      0
; end of _getStepper1Settings
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x073C	0x0E36      	MOVLW       _UART1_Write
0x073E	0x0101      	MOVLB       1
0x0740	0x6F5C      	MOVWF       _UART_Wr_Ptr, 1
0x0742	0x0E00      	MOVLW       hi_addr(_UART1_Write)
0x0744	0x6F5D      	MOVWF       _UART_Wr_Ptr+1, 1
0x0746	0x0E7E      	MOVLW       FARG_UART1_Write_data_
0x0748	0x6F5E      	MOVWF       _UART_Wr_Ptr+2, 1
0x074A	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x074C	0x6F5F      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67.c,19 :: 		
0x074E	0x0E72      	MOVLW       _UART1_Read
0x0750	0x6F64      	MOVWF       _UART_Rd_Ptr, 1
0x0752	0x0E02      	MOVLW       hi_addr(_UART1_Read)
0x0754	0x6F65      	MOVWF       _UART_Rd_Ptr+1, 1
0x0756	0x0E00      	MOVLW       0
0x0758	0x6F66      	MOVWF       _UART_Rd_Ptr+2, 1
0x075A	0x0E00      	MOVLW       0
0x075C	0x6F67      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67.c,20 :: 		
0x075E	0x0E84      	MOVLW       _UART1_Data_Ready
0x0760	0x6F60      	MOVWF       _UART_Rdy_Ptr, 1
0x0762	0x0E02      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0764	0x6F61      	MOVWF       _UART_Rdy_Ptr+1, 1
0x0766	0x0E00      	MOVLW       0
0x0768	0x6F62      	MOVWF       _UART_Rdy_Ptr+2, 1
0x076A	0x0E00      	MOVLW       0
0x076C	0x6F63      	MOVWF       _UART_Rdy_Ptr+3, 1
;__Lib_UART_c67.c,21 :: 		
0x076E	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0770	0x6F68      	MOVWF       _UART_Tx_Idle_Ptr, 1
0x0772	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0774	0x6F69      	MOVWF       _UART_Tx_Idle_Ptr+1, 1
0x0776	0x0E00      	MOVLW       0
0x0778	0x6F6A      	MOVWF       _UART_Tx_Idle_Ptr+2, 1
0x077A	0x0E00      	MOVLW       0
0x077C	0x6F6B      	MOVWF       _UART_Tx_Idle_Ptr+3, 1
;__Lib_UART_c67.c,23 :: 		
0x077E	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0780	0x0E90      	MOVLW       144
0x0782	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x0784	0x8E94      	BSF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_UART_c67.c,26 :: 		
0x0786	0x9C94      	BCF         TRISC6_bit, BitPos(TRISC6_bit+0) 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x0788	0xAA9E      	BTFSS       PIR1, 5 
0x078A	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x078C	0xF000CFAE  	MOVFF       RCREG, R0
0x0790	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
L_end_UART1_Init:
0x0792	0x0012      	RETURN      0
; end of _UART1_Init
_strcmp:
;__Lib_CString.c,122 :: 		
;__Lib_CString.c,124 :: 		
L_strcmp30:
0x0794	0xFFE9C16C  	MOVFF       FARG_strcmp_s1, FSR0L
0x0798	0xFFEAC16D  	MOVFF       FARG_strcmp_s1+1, FSR0H
0x079C	0x52EE      	MOVF        POSTINC0, 1 
0x079E	0xE011      	BZ          L_strcmp31
0x07A0	0xFFE9C16C  	MOVFF       FARG_strcmp_s1, FSR0L
0x07A4	0xFFEAC16D  	MOVFF       FARG_strcmp_s1+1, FSR0H
0x07A8	0xFFD9C16E  	MOVFF       FARG_strcmp_s2, FSR2L
0x07AC	0xFFDAC16F  	MOVFF       FARG_strcmp_s2+1, FSR2H
0x07B0	0x50EE      	MOVF        POSTINC0, 0 
0x07B2	0x18DE      	XORWF       POSTINC2, 0 
0x07B4	0xE106      	BNZ         L_strcmp31
L__strcmp81:
;__Lib_CString.c,125 :: 		
0x07B6	0x0101      	MOVLB       1
0x07B8	0x4B6C      	INFSNZ      FARG_strcmp_s1, 1, 1
0x07BA	0x2B6D      	INCF        FARG_strcmp_s1+1, 1, 1
0x07BC	0x4B6E      	INFSNZ      FARG_strcmp_s2, 1, 1
0x07BE	0x2B6F      	INCF        FARG_strcmp_s2+1, 1, 1
0x07C0	0xD7E9      	BRA         L_strcmp30
L_strcmp31:
;__Lib_CString.c,127 :: 		
0x07C2	0xFFE9C16C  	MOVFF       FARG_strcmp_s1, FSR0L
0x07C6	0xFFEAC16D  	MOVFF       FARG_strcmp_s1+1, FSR0H
0x07CA	0xFFD9C16E  	MOVFF       FARG_strcmp_s2, FSR2L
0x07CE	0xFFDAC16F  	MOVFF       FARG_strcmp_s2+1, FSR2H
0x07D2	0x50DE      	MOVF        POSTINC2, 0 
0x07D4	0x5CEE      	SUBWF       POSTINC0, 0 
0x07D6	0x6E00      	MOVWF       R0 
0x07D8	0x6A01      	CLRF        R1 
0x07DA	0x0E00      	MOVLW       0
0x07DC	0x5A01      	SUBWFB      R1, 1 
;__Lib_CString.c,128 :: 		
L_end_strcmp:
0x07DE	0x0012      	RETURN      0
; end of _strcmp
_stepper1StartCounterClockWise:
;CNC.c,226 :: 		void stepper1StartCounterClockWise()
;CNC.c,230 :: 		stepper1LastStepDone = getProperLastStepForCCW(stepper1LastStepDone);
0x07E0	0xF170C10C  	MOVFF       _stepper1LastStepDone, FARG_getProperLastStepForCCW_lastStep
0x07E4	0xF171C10D  	MOVFF       _stepper1LastStepDone+1, FARG_getProperLastStepForCCW_lastStep+1
0x07E8	0xDD66      	RCALL       _getProperLastStepForCCW
0x07EA	0xF10CC000  	MOVFF       R0, _stepper1LastStepDone
0x07EE	0xF10DC001  	MOVFF       R1, _stepper1LastStepDone+1
;CNC.c,231 :: 		INTCON.TMR0IE = 1;          //Enable interrup checking for stop
0x07F2	0x8AF2      	BSF         INTCON, 5 
;CNC.c,233 :: 		for(i = stepper1LastStepDone , stepsNeeded = stepper1Steps + stepper1LastStepDone; i < stepsNeeded  ; i++)
0x07F4	0xF16CC000  	MOVFF       R0, stepper1StartCounterClockWise_i_L0
0x07F8	0xF16DC001  	MOVFF       R1, stepper1StartCounterClockWise_i_L0+1
0x07FC	0x5000      	MOVF        R0, 0 
0x07FE	0x0100      	MOVLB       0
0x0800	0x25F3      	ADDWF       _stepper1Steps, 0, 1
0x0802	0x0101      	MOVLB       1
0x0804	0x6F6E      	MOVWF       stepper1StartCounterClockWise_stepsNeeded_L0, 1
0x0806	0x5001      	MOVF        R1, 0 
0x0808	0x0100      	MOVLB       0
0x080A	0x21F4      	ADDWFC      _stepper1Steps+1, 0, 1
0x080C	0x0101      	MOVLB       1
0x080E	0x6F6F      	MOVWF       stepper1StartCounterClockWise_stepsNeeded_L0+1, 1
L_stepper1StartCounterClockWise35:
0x0810	0x0E80      	MOVLW       128
0x0812	0x196D      	XORWF       stepper1StartCounterClockWise_i_L0+1, 0, 1
0x0814	0x6E00      	MOVWF       R0 
0x0816	0x0E80      	MOVLW       128
0x0818	0x196F      	XORWF       stepper1StartCounterClockWise_stepsNeeded_L0+1, 0, 1
0x081A	0x5C00      	SUBWF       R0, 0 
0x081C	0xE102      	BNZ         L__stepper1StartCounterClockWise151
0x081E	0x516E      	MOVF        stepper1StartCounterClockWise_stepsNeeded_L0, 0, 1
0x0820	0x5D6C      	SUBWF       stepper1StartCounterClockWise_i_L0, 0, 1
L__stepper1StartCounterClockWise151:
0x0822	0xB0D8      	BTFSC       STATUS, 0 
0x0824	0xD061      	BRA         L_stepper1StartCounterClockWise36
;CNC.c,235 :: 		if(i % 4 == 0 && INTCON.TMR0IE != 0)
0x0826	0x0E04      	MOVLW       4
0x0828	0x6E04      	MOVWF       R4 
0x082A	0x0E00      	MOVLW       0
0x082C	0x6E05      	MOVWF       R5 
0x082E	0xF000C16C  	MOVFF       stepper1StartCounterClockWise_i_L0, R0
0x0832	0xF001C16D  	MOVFF       stepper1StartCounterClockWise_i_L0+1, R1
0x0836	0xDDBF      	RCALL       _Div_16x16_S
0x0838	0xF000C008  	MOVFF       R8, R0
0x083C	0xF001C009  	MOVFF       R9, R1
0x0840	0x0E00      	MOVLW       0
0x0842	0x1801      	XORWF       R1, 0 
0x0844	0xE102      	BNZ         L__stepper1StartCounterClockWise152
0x0846	0x0E00      	MOVLW       0
0x0848	0x1800      	XORWF       R0, 0 
L__stepper1StartCounterClockWise152:
0x084A	0xE104      	BNZ         L_stepper1StartCounterClockWise40
0x084C	0xAAF2      	BTFSS       INTCON, 5 
0x084E	0xD002      	BRA         L_stepper1StartCounterClockWise40
L__stepper1StartCounterClockWise119:
;CNC.c,237 :: 		stepper1Step41();
0x0850	0xDD5F      	RCALL       _stepper1Step41
;CNC.c,238 :: 		}
0x0852	0xD046      	BRA         L_stepper1StartCounterClockWise41
L_stepper1StartCounterClockWise40:
;CNC.c,239 :: 		else if(i % 4 == 1 && INTCON.TMR0IE != 0)
0x0854	0x0E04      	MOVLW       4
0x0856	0x6E04      	MOVWF       R4 
0x0858	0x0E00      	MOVLW       0
0x085A	0x6E05      	MOVWF       R5 
0x085C	0xF000C16C  	MOVFF       stepper1StartCounterClockWise_i_L0, R0
0x0860	0xF001C16D  	MOVFF       stepper1StartCounterClockWise_i_L0+1, R1
0x0864	0xDDA8      	RCALL       _Div_16x16_S
0x0866	0xF000C008  	MOVFF       R8, R0
0x086A	0xF001C009  	MOVFF       R9, R1
0x086E	0x0E00      	MOVLW       0
0x0870	0x1801      	XORWF       R1, 0 
0x0872	0xE102      	BNZ         L__stepper1StartCounterClockWise153
0x0874	0x0E01      	MOVLW       1
0x0876	0x1800      	XORWF       R0, 0 
L__stepper1StartCounterClockWise153:
0x0878	0xE104      	BNZ         L_stepper1StartCounterClockWise44
0x087A	0xAAF2      	BTFSS       INTCON, 5 
0x087C	0xD002      	BRA         L_stepper1StartCounterClockWise44
L__stepper1StartCounterClockWise118:
;CNC.c,241 :: 		stepper1Step34();
0x087E	0xDD5D      	RCALL       _stepper1Step34
;CNC.c,242 :: 		}
0x0880	0xD02F      	BRA         L_stepper1StartCounterClockWise45
L_stepper1StartCounterClockWise44:
;CNC.c,243 :: 		else if(i % 4 == 2 && INTCON.TMR0IE != 0)
0x0882	0x0E04      	MOVLW       4
0x0884	0x6E04      	MOVWF       R4 
0x0886	0x0E00      	MOVLW       0
0x0888	0x6E05      	MOVWF       R5 
0x088A	0xF000C16C  	MOVFF       stepper1StartCounterClockWise_i_L0, R0
0x088E	0xF001C16D  	MOVFF       stepper1StartCounterClockWise_i_L0+1, R1
0x0892	0xDD91      	RCALL       _Div_16x16_S
0x0894	0xF000C008  	MOVFF       R8, R0
0x0898	0xF001C009  	MOVFF       R9, R1
0x089C	0x0E00      	MOVLW       0
0x089E	0x1801      	XORWF       R1, 0 
0x08A0	0xE102      	BNZ         L__stepper1StartCounterClockWise154
0x08A2	0x0E02      	MOVLW       2
0x08A4	0x1800      	XORWF       R0, 0 
L__stepper1StartCounterClockWise154:
0x08A6	0xE104      	BNZ         L_stepper1StartCounterClockWise48
0x08A8	0xAAF2      	BTFSS       INTCON, 5 
0x08AA	0xD002      	BRA         L_stepper1StartCounterClockWise48
L__stepper1StartCounterClockWise117:
;CNC.c,245 :: 		stepper1Step23();
0x08AC	0xDD5B      	RCALL       _stepper1Step23
;CNC.c,246 :: 		}
0x08AE	0xD018      	BRA         L_stepper1StartCounterClockWise49
L_stepper1StartCounterClockWise48:
;CNC.c,247 :: 		else if(i % 4 == 3 && INTCON.TMR0IE != 0)
0x08B0	0x0E04      	MOVLW       4
0x08B2	0x6E04      	MOVWF       R4 
0x08B4	0x0E00      	MOVLW       0
0x08B6	0x6E05      	MOVWF       R5 
0x08B8	0xF000C16C  	MOVFF       stepper1StartCounterClockWise_i_L0, R0
0x08BC	0xF001C16D  	MOVFF       stepper1StartCounterClockWise_i_L0+1, R1
0x08C0	0xDD7A      	RCALL       _Div_16x16_S
0x08C2	0xF000C008  	MOVFF       R8, R0
0x08C6	0xF001C009  	MOVFF       R9, R1
0x08CA	0x0E00      	MOVLW       0
0x08CC	0x1801      	XORWF       R1, 0 
0x08CE	0xE102      	BNZ         L__stepper1StartCounterClockWise155
0x08D0	0x0E03      	MOVLW       3
0x08D2	0x1800      	XORWF       R0, 0 
L__stepper1StartCounterClockWise155:
0x08D4	0xE104      	BNZ         L_stepper1StartCounterClockWise52
0x08D6	0xAAF2      	BTFSS       INTCON, 5 
0x08D8	0xD002      	BRA         L_stepper1StartCounterClockWise52
L__stepper1StartCounterClockWise116:
;CNC.c,249 :: 		stepper1Step12();
0x08DA	0xDE9A      	RCALL       _stepper1Step12
;CNC.c,250 :: 		}
0x08DC	0xD001      	BRA         L_stepper1StartCounterClockWise53
L_stepper1StartCounterClockWise52:
;CNC.c,253 :: 		return;
0x08DE	0xD00B      	BRA         L_end_stepper1StartCounterClockWise
;CNC.c,254 :: 		}
L_stepper1StartCounterClockWise53:
L_stepper1StartCounterClockWise49:
L_stepper1StartCounterClockWise45:
L_stepper1StartCounterClockWise41:
0x08E0	0x0101      	MOVLB       1
;CNC.c,233 :: 		for(i = stepper1LastStepDone , stepsNeeded = stepper1Steps + stepper1LastStepDone; i < stepsNeeded  ; i++)
0x08E2	0x4B6C      	INFSNZ      stepper1StartCounterClockWise_i_L0, 1, 1
0x08E4	0x2B6D      	INCF        stepper1StartCounterClockWise_i_L0+1, 1, 1
;CNC.c,256 :: 		}
0x08E6	0xD794      	BRA         L_stepper1StartCounterClockWise35
L_stepper1StartCounterClockWise36:
;CNC.c,258 :: 		Uart1_Write_Text("Finished1");     //Inform the pc that the motor has finished
0x08E8	0x0EE9      	MOVLW       ?lstr18_CNC
0x08EA	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x08EC	0x0E00      	MOVLW       hi_addr(?lstr18_CNC)
0x08EE	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x08F0	0xDC3A      	RCALL       _UART1_Write_Text
;CNC.c,259 :: 		writeLine();
0x08F2	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,261 :: 		}
L_end_stepper1StartCounterClockWise:
0x08F6	0x0012      	RETURN      0
; end of _stepper1StartCounterClockWise
_getStepper2Settings:
;CNC.c,402 :: 		void getStepper2Settings()
;CNC.c,404 :: 		UART1_Write_Text("Direction2");    //Order direction from pc
0x08F8	0x0EA4      	MOVLW       ?lstr27_CNC
0x08FA	0x0101      	MOVLB       1
0x08FC	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x08FE	0x0E00      	MOVLW       hi_addr(?lstr27_CNC)
0x0900	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0902	0xDC31      	RCALL       _UART1_Write_Text
;CNC.c,405 :: 		writeLine();
0x0904	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,407 :: 		while(UART1_Data_Ready() != 1);     //wait until pc sends direction
L_getStepper2Settings106:
0x0908	0xDCBD      	RCALL       _UART1_Data_Ready
0x090A	0x5000      	MOVF        R0, 0 
0x090C	0x0A01      	XORLW       1
0x090E	0xE001      	BZ          L_getStepper2Settings107
0x0910	0xD7FB      	BRA         L_getStepper2Settings106
L_getStepper2Settings107:
;CNC.c,408 :: 		UART1_Read_Text(stepper2Direction , "!ok" , 10);   //get direction
0x0912	0x0E33      	MOVLW       _stepper2Direction
0x0914	0x0101      	MOVLB       1
0x0916	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x0918	0x0E01      	MOVLW       hi_addr(_stepper2Direction)
0x091A	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x091C	0x0E98      	MOVLW       ?lstr28_CNC
0x091E	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x0920	0x0E00      	MOVLW       hi_addr(?lstr28_CNC)
0x0922	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x0924	0x0E0A      	MOVLW       10
0x0926	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x0928	0xDDA9      	RCALL       _UART1_Read_Text
;CNC.c,410 :: 		UART1_Write_Text("Speed2");     //order speed from pc
0x092A	0x0E91      	MOVLW       ?lstr29_CNC
0x092C	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x092E	0x0E00      	MOVLW       hi_addr(?lstr29_CNC)
0x0930	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0932	0xDC19      	RCALL       _UART1_Write_Text
;CNC.c,411 :: 		writeLine();
0x0934	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,413 :: 		while(UART1_Data_Ready() != 1);     //wait until pc sends speed
L_getStepper2Settings108:
0x0938	0xDCA5      	RCALL       _UART1_Data_Ready
0x093A	0x5000      	MOVF        R0, 0 
0x093C	0x0A01      	XORLW       1
0x093E	0xE001      	BZ          L_getStepper2Settings109
0x0940	0xD7FB      	BRA         L_getStepper2Settings108
L_getStepper2Settings109:
;CNC.c,414 :: 		UART1_Read_Text(stepper2SpeedString , "!ok" , 10);   //get speed
0x0942	0x0E3D      	MOVLW       _stepper2SpeedString
0x0944	0x0101      	MOVLB       1
0x0946	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x0948	0x0E01      	MOVLW       hi_addr(_stepper2SpeedString)
0x094A	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x094C	0x0E9C      	MOVLW       ?lstr30_CNC
0x094E	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x0950	0x0E00      	MOVLW       hi_addr(?lstr30_CNC)
0x0952	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x0954	0x0E0A      	MOVLW       10
0x0956	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x0958	0xDD91      	RCALL       _UART1_Read_Text
;CNC.c,415 :: 		stepper2Speed = atoi(stepper2SpeedString);       //convert speedString to integer
0x095A	0x0E3D      	MOVLW       _stepper2SpeedString
0x095C	0x6F70      	MOVWF       FARG_atoi_s, 1
0x095E	0x0E01      	MOVLW       hi_addr(_stepper2SpeedString)
0x0960	0x6F71      	MOVWF       FARG_atoi_s+1, 1
0x0962	0xDDD9      	RCALL       _atoi
0x0964	0xF03FC000  	MOVFF       R0, _stepper2Speed
0x0968	0xF040C001  	MOVFF       R1, _stepper2Speed+1
;CNC.c,416 :: 		stepper2Speed = 1050 - stepper2Speed * 10;      //Map the speed to a proper delay time
0x096C	0x0E0A      	MOVLW       10
0x096E	0x6E04      	MOVWF       R4 
0x0970	0x0E00      	MOVLW       0
0x0972	0x6E05      	MOVWF       R5 
0x0974	0xDC12      	RCALL       _Mul_16X16_U
0x0976	0x5000      	MOVF        R0, 0 
0x0978	0x081A      	SUBLW       26
0x097A	0x6E3F      	MOVWF       _stepper2Speed 
0x097C	0xF040C001  	MOVFF       R1, _stepper2Speed+1
0x0980	0x0E04      	MOVLW       4
0x0982	0x5640      	SUBFWB      _stepper2Speed+1, 1 
;CNC.c,418 :: 		UART1_Write_Text("Steps2");      //order steps from pc
0x0984	0x0E0E      	MOVLW       ?lstr31_CNC
0x0986	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0988	0x0E01      	MOVLW       hi_addr(?lstr31_CNC)
0x098A	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x098C	0xF000ECB3  	CALL        _UART1_Write_Text, 0
;CNC.c,419 :: 		writeLine();
0x0990	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,421 :: 		while(UART1_Data_Ready() != 1);     //wait until pc sends number of steps
L_getStepper2Settings110:
0x0994	0xDC77      	RCALL       _UART1_Data_Ready
0x0996	0x5000      	MOVF        R0, 0 
0x0998	0x0A01      	XORLW       1
0x099A	0xE001      	BZ          L_getStepper2Settings111
0x099C	0xD7FB      	BRA         L_getStepper2Settings110
L_getStepper2Settings111:
;CNC.c,422 :: 		UART1_Read_Text(stepper2StepsString , "!ok" , 10);   //get steps
0x099E	0x0E51      	MOVLW       _stepper2StepsString
0x09A0	0x0101      	MOVLB       1
0x09A2	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x09A4	0x0E01      	MOVLW       hi_addr(_stepper2StepsString)
0x09A6	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x09A8	0x0EDA      	MOVLW       ?lstr32_CNC
0x09AA	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x09AC	0x0E00      	MOVLW       hi_addr(?lstr32_CNC)
0x09AE	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x09B0	0x0E0A      	MOVLW       10
0x09B2	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x09B4	0xDD63      	RCALL       _UART1_Read_Text
;CNC.c,423 :: 		stepper2Steps = atoi(stepper2StepsString);
0x09B6	0x0E51      	MOVLW       _stepper2StepsString
0x09B8	0x6F70      	MOVWF       FARG_atoi_s, 1
0x09BA	0x0E01      	MOVLW       hi_addr(_stepper2StepsString)
0x09BC	0x6F71      	MOVWF       FARG_atoi_s+1, 1
0x09BE	0xDDAB      	RCALL       _atoi
0x09C0	0xF022C000  	MOVFF       R0, _stepper2Steps
0x09C4	0xF023C001  	MOVFF       R1, _stepper2Steps+1
;CNC.c,424 :: 		}
L_end_getStepper2Settings:
0x09C8	0x0012      	RETURN      0
; end of _getStepper2Settings
_stepper1StartClockWise:
;CNC.c,190 :: 		void stepper1StartClockWise()
;CNC.c,194 :: 		INTCON.TMR0IE = 1;     //Enable interrup checking for stop
0x09CA	0x8AF2      	BSF         INTCON, 5 
;CNC.c,196 :: 		for(i = stepper1LastStepDone , stepsNeeded = stepper1Steps + stepper1LastStepDone; i < stepsNeeded  ; i++)
0x09CC	0xF16CC10C  	MOVFF       _stepper1LastStepDone, stepper1StartClockWise_i_L0
0x09D0	0xF16DC10D  	MOVFF       _stepper1LastStepDone+1, stepper1StartClockWise_i_L0+1
0x09D4	0x0101      	MOVLB       1
0x09D6	0x510C      	MOVF        _stepper1LastStepDone, 0, 1
0x09D8	0x0100      	MOVLB       0
0x09DA	0x25F3      	ADDWF       _stepper1Steps, 0, 1
0x09DC	0x0101      	MOVLB       1
0x09DE	0x6F6E      	MOVWF       stepper1StartClockWise_stepsNeeded_L0, 1
0x09E0	0x510D      	MOVF        _stepper1LastStepDone+1, 0, 1
0x09E2	0x0100      	MOVLB       0
0x09E4	0x21F4      	ADDWFC      _stepper1Steps+1, 0, 1
0x09E6	0x0101      	MOVLB       1
0x09E8	0x6F6F      	MOVWF       stepper1StartClockWise_stepsNeeded_L0+1, 1
L_stepper1StartClockWise16:
0x09EA	0x0E80      	MOVLW       128
0x09EC	0x196D      	XORWF       stepper1StartClockWise_i_L0+1, 0, 1
0x09EE	0x6E00      	MOVWF       R0 
0x09F0	0x0E80      	MOVLW       128
0x09F2	0x196F      	XORWF       stepper1StartClockWise_stepsNeeded_L0+1, 0, 1
0x09F4	0x5C00      	SUBWF       R0, 0 
0x09F6	0xE102      	BNZ         L__stepper1StartClockWise145
0x09F8	0x516E      	MOVF        stepper1StartClockWise_stepsNeeded_L0, 0, 1
0x09FA	0x5D6C      	SUBWF       stepper1StartClockWise_i_L0, 0, 1
L__stepper1StartClockWise145:
0x09FC	0xB0D8      	BTFSC       STATUS, 0 
0x09FE	0xD061      	BRA         L_stepper1StartClockWise17
;CNC.c,198 :: 		if(i % 4 == 0 && INTCON.TMR0IE != 0)
0x0A00	0x0E04      	MOVLW       4
0x0A02	0x6E04      	MOVWF       R4 
0x0A04	0x0E00      	MOVLW       0
0x0A06	0x6E05      	MOVWF       R5 
0x0A08	0xF000C16C  	MOVFF       stepper1StartClockWise_i_L0, R0
0x0A0C	0xF001C16D  	MOVFF       stepper1StartClockWise_i_L0+1, R1
0x0A10	0xDCD2      	RCALL       _Div_16x16_S
0x0A12	0xF000C008  	MOVFF       R8, R0
0x0A16	0xF001C009  	MOVFF       R9, R1
0x0A1A	0x0E00      	MOVLW       0
0x0A1C	0x1801      	XORWF       R1, 0 
0x0A1E	0xE102      	BNZ         L__stepper1StartClockWise146
0x0A20	0x0E00      	MOVLW       0
0x0A22	0x1800      	XORWF       R0, 0 
L__stepper1StartClockWise146:
0x0A24	0xE104      	BNZ         L_stepper1StartClockWise21
0x0A26	0xAAF2      	BTFSS       INTCON, 5 
0x0A28	0xD002      	BRA         L_stepper1StartClockWise21
L__stepper1StartClockWise115:
;CNC.c,200 :: 		stepper1Step12();
0x0A2A	0xDDF2      	RCALL       _stepper1Step12
;CNC.c,201 :: 		}
0x0A2C	0xD046      	BRA         L_stepper1StartClockWise22
L_stepper1StartClockWise21:
;CNC.c,202 :: 		else if(i % 4 == 1 && INTCON.TMR0IE != 0)
0x0A2E	0x0E04      	MOVLW       4
0x0A30	0x6E04      	MOVWF       R4 
0x0A32	0x0E00      	MOVLW       0
0x0A34	0x6E05      	MOVWF       R5 
0x0A36	0xF000C16C  	MOVFF       stepper1StartClockWise_i_L0, R0
0x0A3A	0xF001C16D  	MOVFF       stepper1StartClockWise_i_L0+1, R1
0x0A3E	0xDCBB      	RCALL       _Div_16x16_S
0x0A40	0xF000C008  	MOVFF       R8, R0
0x0A44	0xF001C009  	MOVFF       R9, R1
0x0A48	0x0E00      	MOVLW       0
0x0A4A	0x1801      	XORWF       R1, 0 
0x0A4C	0xE102      	BNZ         L__stepper1StartClockWise147
0x0A4E	0x0E01      	MOVLW       1
0x0A50	0x1800      	XORWF       R0, 0 
L__stepper1StartClockWise147:
0x0A52	0xE104      	BNZ         L_stepper1StartClockWise25
0x0A54	0xAAF2      	BTFSS       INTCON, 5 
0x0A56	0xD002      	BRA         L_stepper1StartClockWise25
L__stepper1StartClockWise114:
;CNC.c,204 :: 		stepper1Step23();
0x0A58	0xDC85      	RCALL       _stepper1Step23
;CNC.c,205 :: 		}
0x0A5A	0xD02F      	BRA         L_stepper1StartClockWise26
L_stepper1StartClockWise25:
;CNC.c,206 :: 		else if(i % 4 == 2 && INTCON.TMR0IE != 0)
0x0A5C	0x0E04      	MOVLW       4
0x0A5E	0x6E04      	MOVWF       R4 
0x0A60	0x0E00      	MOVLW       0
0x0A62	0x6E05      	MOVWF       R5 
0x0A64	0xF000C16C  	MOVFF       stepper1StartClockWise_i_L0, R0
0x0A68	0xF001C16D  	MOVFF       stepper1StartClockWise_i_L0+1, R1
0x0A6C	0xDCA4      	RCALL       _Div_16x16_S
0x0A6E	0xF000C008  	MOVFF       R8, R0
0x0A72	0xF001C009  	MOVFF       R9, R1
0x0A76	0x0E00      	MOVLW       0
0x0A78	0x1801      	XORWF       R1, 0 
0x0A7A	0xE102      	BNZ         L__stepper1StartClockWise148
0x0A7C	0x0E02      	MOVLW       2
0x0A7E	0x1800      	XORWF       R0, 0 
L__stepper1StartClockWise148:
0x0A80	0xE104      	BNZ         L_stepper1StartClockWise29
0x0A82	0xAAF2      	BTFSS       INTCON, 5 
0x0A84	0xD002      	BRA         L_stepper1StartClockWise29
L__stepper1StartClockWise113:
;CNC.c,208 :: 		stepper1Step34();
0x0A86	0xDC59      	RCALL       _stepper1Step34
;CNC.c,209 :: 		}
0x0A88	0xD018      	BRA         L_stepper1StartClockWise30
L_stepper1StartClockWise29:
;CNC.c,210 :: 		else if(i % 4 == 3 && INTCON.TMR0IE != 0)
0x0A8A	0x0E04      	MOVLW       4
0x0A8C	0x6E04      	MOVWF       R4 
0x0A8E	0x0E00      	MOVLW       0
0x0A90	0x6E05      	MOVWF       R5 
0x0A92	0xF000C16C  	MOVFF       stepper1StartClockWise_i_L0, R0
0x0A96	0xF001C16D  	MOVFF       stepper1StartClockWise_i_L0+1, R1
0x0A9A	0xDC8D      	RCALL       _Div_16x16_S
0x0A9C	0xF000C008  	MOVFF       R8, R0
0x0AA0	0xF001C009  	MOVFF       R9, R1
0x0AA4	0x0E00      	MOVLW       0
0x0AA6	0x1801      	XORWF       R1, 0 
0x0AA8	0xE102      	BNZ         L__stepper1StartClockWise149
0x0AAA	0x0E03      	MOVLW       3
0x0AAC	0x1800      	XORWF       R0, 0 
L__stepper1StartClockWise149:
0x0AAE	0xE104      	BNZ         L_stepper1StartClockWise33
0x0AB0	0xAAF2      	BTFSS       INTCON, 5 
0x0AB2	0xD002      	BRA         L_stepper1StartClockWise33
L__stepper1StartClockWise112:
;CNC.c,212 :: 		stepper1Step41();
0x0AB4	0xDC2D      	RCALL       _stepper1Step41
;CNC.c,213 :: 		}
0x0AB6	0xD001      	BRA         L_stepper1StartClockWise34
L_stepper1StartClockWise33:
;CNC.c,216 :: 		return;
0x0AB8	0xD00C      	BRA         L_end_stepper1StartClockWise
;CNC.c,217 :: 		}
L_stepper1StartClockWise34:
L_stepper1StartClockWise30:
L_stepper1StartClockWise26:
L_stepper1StartClockWise22:
0x0ABA	0x0101      	MOVLB       1
;CNC.c,196 :: 		for(i = stepper1LastStepDone , stepsNeeded = stepper1Steps + stepper1LastStepDone; i < stepsNeeded  ; i++)
0x0ABC	0x4B6C      	INFSNZ      stepper1StartClockWise_i_L0, 1, 1
0x0ABE	0x2B6D      	INCF        stepper1StartClockWise_i_L0+1, 1, 1
;CNC.c,219 :: 		}
0x0AC0	0xD794      	BRA         L_stepper1StartClockWise16
L_stepper1StartClockWise17:
;CNC.c,221 :: 		Uart1_Write_Text("Finished1");       //Inform the pc that the motor has finished
0x0AC2	0x0E00      	MOVLW       ?lstr17_CNC
0x0AC4	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0AC6	0x0E01      	MOVLW       hi_addr(?lstr17_CNC)
0x0AC8	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0ACA	0xF000ECB3  	CALL        _UART1_Write_Text, 0
;CNC.c,222 :: 		writeLine();
0x0ACE	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,224 :: 		}
L_end_stepper1StartClockWise:
0x0AD2	0x0012      	RETURN      0
; end of _stepper1StartClockWise
_stepper2StartClockWise:
;CNC.c,264 :: 		void stepper2StartClockWise()
;CNC.c,268 :: 		INTCON.TMR0IE = 1;     //Enable interrup checking for stop
0x0AD4	0x8AF2      	BSF         INTCON, 5 
;CNC.c,270 :: 		for(i = stepper2LastStepDone , stepsNeeded = stepper2Steps + stepper2LastStepDone; i < stepsNeeded  ; i++)
0x0AD6	0xF16CC03D  	MOVFF       _stepper2LastStepDone, stepper2StartClockWise_i_L0
0x0ADA	0xF16DC03E  	MOVFF       _stepper2LastStepDone+1, stepper2StartClockWise_i_L0+1
0x0ADE	0x503D      	MOVF        _stepper2LastStepDone, 0 
0x0AE0	0x2422      	ADDWF       _stepper2Steps, 0 
0x0AE2	0x0101      	MOVLB       1
0x0AE4	0x6F6E      	MOVWF       stepper2StartClockWise_stepsNeeded_L0, 1
0x0AE6	0x503E      	MOVF        _stepper2LastStepDone+1, 0 
0x0AE8	0x2023      	ADDWFC      _stepper2Steps+1, 0 
0x0AEA	0x6F6F      	MOVWF       stepper2StartClockWise_stepsNeeded_L0+1, 1
L_stepper2StartClockWise54:
0x0AEC	0x0E80      	MOVLW       128
0x0AEE	0x196D      	XORWF       stepper2StartClockWise_i_L0+1, 0, 1
0x0AF0	0x6E00      	MOVWF       R0 
0x0AF2	0x0E80      	MOVLW       128
0x0AF4	0x196F      	XORWF       stepper2StartClockWise_stepsNeeded_L0+1, 0, 1
0x0AF6	0x5C00      	SUBWF       R0, 0 
0x0AF8	0xE102      	BNZ         L__stepper2StartClockWise157
0x0AFA	0x516E      	MOVF        stepper2StartClockWise_stepsNeeded_L0, 0, 1
0x0AFC	0x5D6C      	SUBWF       stepper2StartClockWise_i_L0, 0, 1
L__stepper2StartClockWise157:
0x0AFE	0xB0D8      	BTFSC       STATUS, 0 
0x0B00	0xD063      	BRA         L_stepper2StartClockWise55
;CNC.c,272 :: 		if(i % 4 == 0 && INTCON.TMR0IE != 0)
0x0B02	0x0E04      	MOVLW       4
0x0B04	0x6E04      	MOVWF       R4 
0x0B06	0x0E00      	MOVLW       0
0x0B08	0x6E05      	MOVWF       R5 
0x0B0A	0xF000C16C  	MOVFF       stepper2StartClockWise_i_L0, R0
0x0B0E	0xF001C16D  	MOVFF       stepper2StartClockWise_i_L0+1, R1
0x0B12	0xDC51      	RCALL       _Div_16x16_S
0x0B14	0xF000C008  	MOVFF       R8, R0
0x0B18	0xF001C009  	MOVFF       R9, R1
0x0B1C	0x0E00      	MOVLW       0
0x0B1E	0x1801      	XORWF       R1, 0 
0x0B20	0xE102      	BNZ         L__stepper2StartClockWise158
0x0B22	0x0E00      	MOVLW       0
0x0B24	0x1800      	XORWF       R0, 0 
L__stepper2StartClockWise158:
0x0B26	0xE105      	BNZ         L_stepper2StartClockWise59
0x0B28	0xAAF2      	BTFSS       INTCON, 5 
0x0B2A	0xD003      	BRA         L_stepper2StartClockWise59
L__stepper2StartClockWise123:
;CNC.c,274 :: 		stepper2Step12();
0x0B2C	0xF001EC47  	CALL        _stepper2Step12, 0
;CNC.c,275 :: 		}
0x0B30	0xD047      	BRA         L_stepper2StartClockWise60
L_stepper2StartClockWise59:
;CNC.c,276 :: 		else if(i % 4 == 1 && INTCON.TMR0IE != 0)
0x0B32	0x0E04      	MOVLW       4
0x0B34	0x6E04      	MOVWF       R4 
0x0B36	0x0E00      	MOVLW       0
0x0B38	0x6E05      	MOVWF       R5 
0x0B3A	0xF000C16C  	MOVFF       stepper2StartClockWise_i_L0, R0
0x0B3E	0xF001C16D  	MOVFF       stepper2StartClockWise_i_L0+1, R1
0x0B42	0xDC39      	RCALL       _Div_16x16_S
0x0B44	0xF000C008  	MOVFF       R8, R0
0x0B48	0xF001C009  	MOVFF       R9, R1
0x0B4C	0x0E00      	MOVLW       0
0x0B4E	0x1801      	XORWF       R1, 0 
0x0B50	0xE102      	BNZ         L__stepper2StartClockWise159
0x0B52	0x0E01      	MOVLW       1
0x0B54	0x1800      	XORWF       R0, 0 
L__stepper2StartClockWise159:
0x0B56	0xE104      	BNZ         L_stepper2StartClockWise63
0x0B58	0xAAF2      	BTFSS       INTCON, 5 
0x0B5A	0xD002      	BRA         L_stepper2StartClockWise63
L__stepper2StartClockWise122:
;CNC.c,278 :: 		stepper2Step23();
0x0B5C	0xDD45      	RCALL       _stepper2Step23
;CNC.c,279 :: 		}
0x0B5E	0xD030      	BRA         L_stepper2StartClockWise64
L_stepper2StartClockWise63:
;CNC.c,280 :: 		else if(i % 4 == 2 && INTCON.TMR0IE != 0)
0x0B60	0x0E04      	MOVLW       4
0x0B62	0x6E04      	MOVWF       R4 
0x0B64	0x0E00      	MOVLW       0
0x0B66	0x6E05      	MOVWF       R5 
0x0B68	0xF000C16C  	MOVFF       stepper2StartClockWise_i_L0, R0
0x0B6C	0xF001C16D  	MOVFF       stepper2StartClockWise_i_L0+1, R1
0x0B70	0xDC22      	RCALL       _Div_16x16_S
0x0B72	0xF000C008  	MOVFF       R8, R0
0x0B76	0xF001C009  	MOVFF       R9, R1
0x0B7A	0x0E00      	MOVLW       0
0x0B7C	0x1801      	XORWF       R1, 0 
0x0B7E	0xE102      	BNZ         L__stepper2StartClockWise160
0x0B80	0x0E02      	MOVLW       2
0x0B82	0x1800      	XORWF       R0, 0 
L__stepper2StartClockWise160:
0x0B84	0xE104      	BNZ         L_stepper2StartClockWise67
0x0B86	0xAAF2      	BTFSS       INTCON, 5 
0x0B88	0xD002      	BRA         L_stepper2StartClockWise67
L__stepper2StartClockWise121:
;CNC.c,282 :: 		stepper2Step34();
0x0B8A	0xDD57      	RCALL       _stepper2Step34
;CNC.c,283 :: 		}
0x0B8C	0xD019      	BRA         L_stepper2StartClockWise68
L_stepper2StartClockWise67:
;CNC.c,284 :: 		else if(i % 4 == 3 && INTCON.TMR0IE != 0)
0x0B8E	0x0E04      	MOVLW       4
0x0B90	0x6E04      	MOVWF       R4 
0x0B92	0x0E00      	MOVLW       0
0x0B94	0x6E05      	MOVWF       R5 
0x0B96	0xF000C16C  	MOVFF       stepper2StartClockWise_i_L0, R0
0x0B9A	0xF001C16D  	MOVFF       stepper2StartClockWise_i_L0+1, R1
0x0B9E	0xDC0B      	RCALL       _Div_16x16_S
0x0BA0	0xF000C008  	MOVFF       R8, R0
0x0BA4	0xF001C009  	MOVFF       R9, R1
0x0BA8	0x0E00      	MOVLW       0
0x0BAA	0x1801      	XORWF       R1, 0 
0x0BAC	0xE102      	BNZ         L__stepper2StartClockWise161
0x0BAE	0x0E03      	MOVLW       3
0x0BB0	0x1800      	XORWF       R0, 0 
L__stepper2StartClockWise161:
0x0BB2	0xE105      	BNZ         L_stepper2StartClockWise71
0x0BB4	0xAAF2      	BTFSS       INTCON, 5 
0x0BB6	0xD003      	BRA         L_stepper2StartClockWise71
L__stepper2StartClockWise120:
;CNC.c,286 :: 		stepper2Step41();
0x0BB8	0xF001ECC7  	CALL        _stepper2Step41, 0
;CNC.c,287 :: 		}
0x0BBC	0xD001      	BRA         L_stepper2StartClockWise72
L_stepper2StartClockWise71:
;CNC.c,290 :: 		return;
0x0BBE	0xD00C      	BRA         L_end_stepper2StartClockWise
;CNC.c,291 :: 		}
L_stepper2StartClockWise72:
L_stepper2StartClockWise68:
L_stepper2StartClockWise64:
L_stepper2StartClockWise60:
0x0BC0	0x0101      	MOVLB       1
;CNC.c,270 :: 		for(i = stepper2LastStepDone , stepsNeeded = stepper2Steps + stepper2LastStepDone; i < stepsNeeded  ; i++)
0x0BC2	0x4B6C      	INFSNZ      stepper2StartClockWise_i_L0, 1, 1
0x0BC4	0x2B6D      	INCF        stepper2StartClockWise_i_L0+1, 1, 1
;CNC.c,293 :: 		}
0x0BC6	0xD792      	BRA         L_stepper2StartClockWise54
L_stepper2StartClockWise55:
;CNC.c,295 :: 		Uart1_Write_Text("Finished2");       //Inform the pc that the motor has finished
0x0BC8	0x0EAF      	MOVLW       ?lstr19_CNC
0x0BCA	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0BCC	0x0E00      	MOVLW       hi_addr(?lstr19_CNC)
0x0BCE	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0BD0	0xF000ECB3  	CALL        _UART1_Write_Text, 0
;CNC.c,296 :: 		writeLine();
0x0BD4	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,298 :: 		}
L_end_stepper2StartClockWise:
0x0BD8	0x0012      	RETURN      0
; end of _stepper2StartClockWise
_stepper2StartCounterClockWise:
;CNC.c,300 :: 		void stepper2StartCounterClockWise()
;CNC.c,304 :: 		stepper2LastStepDone = getProperLastStepForCCW(stepper2LastStepDone);
0x0BDA	0xF170C03D  	MOVFF       _stepper2LastStepDone, FARG_getProperLastStepForCCW_lastStep
0x0BDE	0xF171C03E  	MOVFF       _stepper2LastStepDone+1, FARG_getProperLastStepForCCW_lastStep+1
0x0BE2	0xF001EC5B  	CALL        _getProperLastStepForCCW, 0
0x0BE6	0xF03DC000  	MOVFF       R0, _stepper2LastStepDone
0x0BEA	0xF03EC001  	MOVFF       R1, _stepper2LastStepDone+1
;CNC.c,305 :: 		INTCON.TMR0IE = 1;          //Enable interrup checking for stop
0x0BEE	0x8AF2      	BSF         INTCON, 5 
;CNC.c,307 :: 		for(i = stepper2LastStepDone , stepsNeeded = stepper2Steps + stepper2LastStepDone; i < stepsNeeded  ; i++)
0x0BF0	0xF16CC000  	MOVFF       R0, stepper2StartCounterClockWise_i_L0
0x0BF4	0xF16DC001  	MOVFF       R1, stepper2StartCounterClockWise_i_L0+1
0x0BF8	0x5000      	MOVF        R0, 0 
0x0BFA	0x2422      	ADDWF       _stepper2Steps, 0 
0x0BFC	0x0101      	MOVLB       1
0x0BFE	0x6F6E      	MOVWF       stepper2StartCounterClockWise_stepsNeeded_L0, 1
0x0C00	0x5001      	MOVF        R1, 0 
0x0C02	0x2023      	ADDWFC      _stepper2Steps+1, 0 
0x0C04	0x6F6F      	MOVWF       stepper2StartCounterClockWise_stepsNeeded_L0+1, 1
L_stepper2StartCounterClockWise73:
0x0C06	0x0E80      	MOVLW       128
0x0C08	0x196D      	XORWF       stepper2StartCounterClockWise_i_L0+1, 0, 1
0x0C0A	0x6E00      	MOVWF       R0 
0x0C0C	0x0E80      	MOVLW       128
0x0C0E	0x196F      	XORWF       stepper2StartCounterClockWise_stepsNeeded_L0+1, 0, 1
0x0C10	0x5C00      	SUBWF       R0, 0 
0x0C12	0xE102      	BNZ         L__stepper2StartCounterClockWise163
0x0C14	0x516E      	MOVF        stepper2StartCounterClockWise_stepsNeeded_L0, 0, 1
0x0C16	0x5D6C      	SUBWF       stepper2StartCounterClockWise_i_L0, 0, 1
L__stepper2StartCounterClockWise163:
0x0C18	0xB0D8      	BTFSC       STATUS, 0 
0x0C1A	0xD067      	BRA         L_stepper2StartCounterClockWise74
;CNC.c,309 :: 		if(i % 4 == 0 && INTCON.TMR0IE != 0)
0x0C1C	0x0E04      	MOVLW       4
0x0C1E	0x6E04      	MOVWF       R4 
0x0C20	0x0E00      	MOVLW       0
0x0C22	0x6E05      	MOVWF       R5 
0x0C24	0xF000C16C  	MOVFF       stepper2StartCounterClockWise_i_L0, R0
0x0C28	0xF001C16D  	MOVFF       stepper2StartCounterClockWise_i_L0+1, R1
0x0C2C	0xF001ECDB  	CALL        _Div_16x16_S, 0
0x0C30	0xF000C008  	MOVFF       R8, R0
0x0C34	0xF001C009  	MOVFF       R9, R1
0x0C38	0x0E00      	MOVLW       0
0x0C3A	0x1801      	XORWF       R1, 0 
0x0C3C	0xE102      	BNZ         L__stepper2StartCounterClockWise164
0x0C3E	0x0E00      	MOVLW       0
0x0C40	0x1800      	XORWF       R0, 0 
L__stepper2StartCounterClockWise164:
0x0C42	0xE105      	BNZ         L_stepper2StartCounterClockWise78
0x0C44	0xAAF2      	BTFSS       INTCON, 5 
0x0C46	0xD003      	BRA         L_stepper2StartCounterClockWise78
L__stepper2StartCounterClockWise127:
;CNC.c,311 :: 		stepper2Step41();
0x0C48	0xF001ECC7  	CALL        _stepper2Step41, 0
;CNC.c,312 :: 		}
0x0C4C	0xD04A      	BRA         L_stepper2StartCounterClockWise79
L_stepper2StartCounterClockWise78:
;CNC.c,313 :: 		else if(i % 4 == 1 && INTCON.TMR0IE != 0)
0x0C4E	0x0E04      	MOVLW       4
0x0C50	0x6E04      	MOVWF       R4 
0x0C52	0x0E00      	MOVLW       0
0x0C54	0x6E05      	MOVWF       R5 
0x0C56	0xF000C16C  	MOVFF       stepper2StartCounterClockWise_i_L0, R0
0x0C5A	0xF001C16D  	MOVFF       stepper2StartCounterClockWise_i_L0+1, R1
0x0C5E	0xF001ECDB  	CALL        _Div_16x16_S, 0
0x0C62	0xF000C008  	MOVFF       R8, R0
0x0C66	0xF001C009  	MOVFF       R9, R1
0x0C6A	0x0E00      	MOVLW       0
0x0C6C	0x1801      	XORWF       R1, 0 
0x0C6E	0xE102      	BNZ         L__stepper2StartCounterClockWise165
0x0C70	0x0E01      	MOVLW       1
0x0C72	0x1800      	XORWF       R0, 0 
L__stepper2StartCounterClockWise165:
0x0C74	0xE104      	BNZ         L_stepper2StartCounterClockWise82
0x0C76	0xAAF2      	BTFSS       INTCON, 5 
0x0C78	0xD002      	BRA         L_stepper2StartCounterClockWise82
L__stepper2StartCounterClockWise126:
;CNC.c,315 :: 		stepper2Step34();
0x0C7A	0xDCDF      	RCALL       _stepper2Step34
;CNC.c,316 :: 		}
0x0C7C	0xD032      	BRA         L_stepper2StartCounterClockWise83
L_stepper2StartCounterClockWise82:
;CNC.c,317 :: 		else if(i % 4 == 2 && INTCON.TMR0IE != 0)
0x0C7E	0x0E04      	MOVLW       4
0x0C80	0x6E04      	MOVWF       R4 
0x0C82	0x0E00      	MOVLW       0
0x0C84	0x6E05      	MOVWF       R5 
0x0C86	0xF000C16C  	MOVFF       stepper2StartCounterClockWise_i_L0, R0
0x0C8A	0xF001C16D  	MOVFF       stepper2StartCounterClockWise_i_L0+1, R1
0x0C8E	0xF001ECDB  	CALL        _Div_16x16_S, 0
0x0C92	0xF000C008  	MOVFF       R8, R0
0x0C96	0xF001C009  	MOVFF       R9, R1
0x0C9A	0x0E00      	MOVLW       0
0x0C9C	0x1801      	XORWF       R1, 0 
0x0C9E	0xE102      	BNZ         L__stepper2StartCounterClockWise166
0x0CA0	0x0E02      	MOVLW       2
0x0CA2	0x1800      	XORWF       R0, 0 
L__stepper2StartCounterClockWise166:
0x0CA4	0xE104      	BNZ         L_stepper2StartCounterClockWise86
0x0CA6	0xAAF2      	BTFSS       INTCON, 5 
0x0CA8	0xD002      	BRA         L_stepper2StartCounterClockWise86
L__stepper2StartCounterClockWise125:
;CNC.c,319 :: 		stepper2Step23();
0x0CAA	0xDC9E      	RCALL       _stepper2Step23
;CNC.c,320 :: 		}
0x0CAC	0xD01A      	BRA         L_stepper2StartCounterClockWise87
L_stepper2StartCounterClockWise86:
;CNC.c,321 :: 		else if(i % 4 == 3 && INTCON.TMR0IE != 0)
0x0CAE	0x0E04      	MOVLW       4
0x0CB0	0x6E04      	MOVWF       R4 
0x0CB2	0x0E00      	MOVLW       0
0x0CB4	0x6E05      	MOVWF       R5 
0x0CB6	0xF000C16C  	MOVFF       stepper2StartCounterClockWise_i_L0, R0
0x0CBA	0xF001C16D  	MOVFF       stepper2StartCounterClockWise_i_L0+1, R1
0x0CBE	0xF001ECDB  	CALL        _Div_16x16_S, 0
0x0CC2	0xF000C008  	MOVFF       R8, R0
0x0CC6	0xF001C009  	MOVFF       R9, R1
0x0CCA	0x0E00      	MOVLW       0
0x0CCC	0x1801      	XORWF       R1, 0 
0x0CCE	0xE102      	BNZ         L__stepper2StartCounterClockWise167
0x0CD0	0x0E03      	MOVLW       3
0x0CD2	0x1800      	XORWF       R0, 0 
L__stepper2StartCounterClockWise167:
0x0CD4	0xE105      	BNZ         L_stepper2StartCounterClockWise90
0x0CD6	0xAAF2      	BTFSS       INTCON, 5 
0x0CD8	0xD003      	BRA         L_stepper2StartCounterClockWise90
L__stepper2StartCounterClockWise124:
;CNC.c,323 :: 		stepper2Step12();
0x0CDA	0xF001EC47  	CALL        _stepper2Step12, 0
;CNC.c,324 :: 		}
0x0CDE	0xD001      	BRA         L_stepper2StartCounterClockWise91
L_stepper2StartCounterClockWise90:
;CNC.c,327 :: 		return;
0x0CE0	0xD00C      	BRA         L_end_stepper2StartCounterClockWise
;CNC.c,328 :: 		}
L_stepper2StartCounterClockWise91:
L_stepper2StartCounterClockWise87:
L_stepper2StartCounterClockWise83:
L_stepper2StartCounterClockWise79:
0x0CE2	0x0101      	MOVLB       1
;CNC.c,307 :: 		for(i = stepper2LastStepDone , stepsNeeded = stepper2Steps + stepper2LastStepDone; i < stepsNeeded  ; i++)
0x0CE4	0x4B6C      	INFSNZ      stepper2StartCounterClockWise_i_L0, 1, 1
0x0CE6	0x2B6D      	INCF        stepper2StartCounterClockWise_i_L0+1, 1, 1
;CNC.c,330 :: 		}
0x0CE8	0xD78E      	BRA         L_stepper2StartCounterClockWise73
L_stepper2StartCounterClockWise74:
;CNC.c,332 :: 		Uart1_Write_Text("Finished2");     //Inform the pc that the motor has finished
0x0CEA	0x0E24      	MOVLW       ?lstr20_CNC
0x0CEC	0x6F78      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x0CEE	0x0E00      	MOVLW       hi_addr(?lstr20_CNC)
0x0CF0	0x6F79      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x0CF2	0xF000ECB3  	CALL        _UART1_Write_Text, 0
;CNC.c,333 :: 		writeLine();
0x0CF6	0xF000EC4B  	CALL        _writeLine, 0
;CNC.c,335 :: 		}
L_end_stepper2StartCounterClockWise:
0x0CFA	0x0012      	RETURN      0
; end of _stepper2StartCounterClockWise
_main:
0x0CFC	0xF007ECB2  	CALL        3940, 0
;CNC.c,40 :: 		void main() {
;CNC.c,42 :: 		TRISD  = 0;        //motors are connected on PortD
0x0D00	0x6A95      	CLRF        TRISD 
;CNC.c,43 :: 		PORTD  = 0;
0x0D02	0x6A83      	CLRF        PORTD 
;CNC.c,44 :: 		TRISB  = 0;       //Leds are connected on PortD
0x0D04	0x6A93      	CLRF        TRISB 
;CNC.c,45 :: 		PORTB  = 0b00100100;       //Red Led is on until motor starts
0x0D06	0x0E24      	MOVLW       36
0x0D08	0x6E81      	MOVWF       PORTB 
;CNC.c,47 :: 		T0CON = 0b10000011;      //Timer0 configurations(used to check for stop)
0x0D0A	0x0E83      	MOVLW       131
0x0D0C	0x6ED5      	MOVWF       T0CON 
;CNC.c,48 :: 		TMR0L = 0x2C;
0x0D0E	0x0E2C      	MOVLW       44
0x0D10	0x6ED6      	MOVWF       TMR0L 
;CNC.c,49 :: 		TMR0H = 0xCF;
0x0D12	0x0ECF      	MOVLW       207
0x0D14	0x6ED7      	MOVWF       TMR0H 
;CNC.c,51 :: 		INTCON.GIE = 1;         //Interrupt enabling
0x0D16	0x8EF2      	BSF         INTCON, 7 
;CNC.c,52 :: 		INTCON.PEIE = 0;
0x0D18	0x9CF2      	BCF         INTCON, 6 
;CNC.c,54 :: 		UART1_Init(9600);      //Initialize Uart with 9600 baud rate
0x0D1A	0x0E33      	MOVLW       51
0x0D1C	0x6EAF      	MOVWF       SPBRG 
0x0D1E	0x84AC      	BSF         TXSTA, 2, 0
0x0D20	0xDD0D      	RCALL       _UART1_Init
;CNC.c,55 :: 		delay_ms(50);
0x0D22	0x0E82      	MOVLW       130
0x0D24	0x6E0C      	MOVWF       R12, 0
0x0D26	0x0EDD      	MOVLW       221
0x0D28	0x6E0D      	MOVWF       R13, 0
L_main0:
0x0D2A	0x2E0D      	DECFSZ      R13, 1, 0
0x0D2C	0xD7FE      	BRA         L_main0
0x0D2E	0x2E0C      	DECFSZ      R12, 1, 0
0x0D30	0xD7FC      	BRA         L_main0
0x0D32	0x0000      	NOP
0x0D34	0x0000      	NOP
;CNC.c,57 :: 		while(1)
L_main1:
;CNC.c,60 :: 		while(UART1_Data_Ready() != 1);        //wait for start or Stop action
L_main3:
0x0D36	0xF001EC42  	CALL        _UART1_Data_Ready, 0
0x0D3A	0x5000      	MOVF        R0, 0 
0x0D3C	0x0A01      	XORLW       1
0x0D3E	0xE001      	BZ          L_main4
0x0D40	0xD7FA      	BRA         L_main3
L_main4:
0x0D42	0x0101      	MOVLB       1
;CNC.c,62 :: 		UART1_Read_Text(recievedAction , "!ok" , 10);       //get action
0x0D44	0x0E47      	MOVLW       _recievedAction
0x0D46	0x6F70      	MOVWF       FARG_UART1_Read_Text_Output, 1
0x0D48	0x0E01      	MOVLW       hi_addr(_recievedAction)
0x0D4A	0x6F71      	MOVWF       FARG_UART1_Read_Text_Output+1, 1
0x0D4C	0x0EA0      	MOVLW       ?lstr1_CNC
0x0D4E	0x6F72      	MOVWF       FARG_UART1_Read_Text_Delimiter, 1
0x0D50	0x0E00      	MOVLW       hi_addr(?lstr1_CNC)
0x0D52	0x6F73      	MOVWF       FARG_UART1_Read_Text_Delimiter+1, 1
0x0D54	0x0E0A      	MOVLW       10
0x0D56	0x6F74      	MOVWF       FARG_UART1_Read_Text_Attempts, 1
0x0D58	0xF002EC3E  	CALL        _UART1_Read_Text, 0
;CNC.c,64 :: 		if(strcmp(recievedAction , "Start1") == 0)      //if the action is start
0x0D5C	0x0E47      	MOVLW       _recievedAction
0x0D5E	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0D60	0x0E01      	MOVLW       hi_addr(_recievedAction)
0x0D62	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0D64	0x0E78      	MOVLW       ?lstr2_CNC
0x0D66	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0D68	0x0E00      	MOVLW       hi_addr(?lstr2_CNC)
0x0D6A	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0D6C	0xDD13      	RCALL       _strcmp
0x0D6E	0x0E00      	MOVLW       0
0x0D70	0x1801      	XORWF       R1, 0 
0x0D72	0xE102      	BNZ         L__main129
0x0D74	0x0E00      	MOVLW       0
0x0D76	0x1800      	XORWF       R0, 0 
L__main129:
0x0D78	0xE12A      	BNZ         L_main5
;CNC.c,67 :: 		PORTb.f2 = 0;       //Turn Red led off
0x0D7A	0x9481      	BCF         PORTB, 2 
;CNC.c,69 :: 		getStepper1Settings();
0x0D7C	0xDC7A      	RCALL       _getStepper1Settings
;CNC.c,71 :: 		if(strcmp(stepper1Direction , "CW") == 0)        //if direction is clockwise
0x0D7E	0x0E29      	MOVLW       _stepper1Direction
0x0D80	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0D82	0x0E01      	MOVLW       hi_addr(_stepper1Direction)
0x0D84	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0D86	0x0E7F      	MOVLW       ?lstr3_CNC
0x0D88	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0D8A	0x0E00      	MOVLW       hi_addr(?lstr3_CNC)
0x0D8C	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0D8E	0xDD02      	RCALL       _strcmp
0x0D90	0x0E00      	MOVLW       0
0x0D92	0x1801      	XORWF       R1, 0 
0x0D94	0xE102      	BNZ         L__main130
0x0D96	0x0E00      	MOVLW       0
0x0D98	0x1800      	XORWF       R0, 0 
L__main130:
0x0D9A	0xE104      	BNZ         L_main6
;CNC.c,73 :: 		portb.f0 = 1;      //Turn on green led
0x0D9C	0x8081      	BSF         PORTB, 0 
;CNC.c,74 :: 		stepper1StartClockWise();
0x0D9E	0xDE15      	RCALL       _stepper1StartClockWise
;CNC.c,75 :: 		PORTb.f0 = 0;      //Turn off green led after finishing
0x0DA0	0x9081      	BCF         PORTB, 0 
;CNC.c,76 :: 		}
0x0DA2	0xD013      	BRA         L_main7
L_main6:
;CNC.c,77 :: 		else if(strcmp(stepper1Direction , "CCW") == 0)        //if direction is counter clockwise
0x0DA4	0x0E29      	MOVLW       _stepper1Direction
0x0DA6	0x0101      	MOVLB       1
0x0DA8	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0DAA	0x0E01      	MOVLW       hi_addr(_stepper1Direction)
0x0DAC	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0DAE	0x0E6D      	MOVLW       ?lstr4_CNC
0x0DB0	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0DB2	0x0E00      	MOVLW       hi_addr(?lstr4_CNC)
0x0DB4	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0DB6	0xDCEE      	RCALL       _strcmp
0x0DB8	0x0E00      	MOVLW       0
0x0DBA	0x1801      	XORWF       R1, 0 
0x0DBC	0xE102      	BNZ         L__main131
0x0DBE	0x0E00      	MOVLW       0
0x0DC0	0x1800      	XORWF       R0, 0 
L__main131:
0x0DC2	0xE103      	BNZ         L_main8
;CNC.c,79 :: 		portb.f1 = 1;        //Turn on yellow led
0x0DC4	0x8281      	BSF         PORTB, 1 
;CNC.c,80 :: 		stepper1StartCounterClockWise();
0x0DC6	0xDD0C      	RCALL       _stepper1StartCounterClockWise
;CNC.c,81 :: 		PORTb.f1 = 0;       //Turn off yellow led after finishing
0x0DC8	0x9281      	BCF         PORTB, 1 
;CNC.c,82 :: 		}
L_main8:
L_main7:
;CNC.c,84 :: 		INTCON.TMR0IE = 0;    //Disable interrupt until a new start comes from PC
0x0DCA	0x9AF2      	BCF         INTCON, 5 
;CNC.c,86 :: 		}
0x0DCC	0xD04A      	BRA         L_main9
L_main5:
;CNC.c,87 :: 		else if(strcmp(recievedAction , "Start2") == 0)      //if the action is start
0x0DCE	0x0E47      	MOVLW       _recievedAction
0x0DD0	0x0101      	MOVLB       1
0x0DD2	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0DD4	0x0E01      	MOVLW       hi_addr(_recievedAction)
0x0DD6	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0DD8	0x0E71      	MOVLW       ?lstr5_CNC
0x0DDA	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0DDC	0x0E00      	MOVLW       hi_addr(?lstr5_CNC)
0x0DDE	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0DE0	0xDCD9      	RCALL       _strcmp
0x0DE2	0x0E00      	MOVLW       0
0x0DE4	0x1801      	XORWF       R1, 0 
0x0DE6	0xE102      	BNZ         L__main132
0x0DE8	0x0E00      	MOVLW       0
0x0DEA	0x1800      	XORWF       R0, 0 
L__main132:
0x0DEC	0xE12A      	BNZ         L_main10
;CNC.c,89 :: 		PORTb.f5 = 0;       //Turn Red led off
0x0DEE	0x9A81      	BCF         PORTB, 5 
;CNC.c,91 :: 		getStepper2Settings();
0x0DF0	0xDD83      	RCALL       _getStepper2Settings
;CNC.c,93 :: 		if(strcmp(stepper2Direction , "CW") == 0)        //if direction is clockwise
0x0DF2	0x0E33      	MOVLW       _stepper2Direction
0x0DF4	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0DF6	0x0E01      	MOVLW       hi_addr(_stepper2Direction)
0x0DF8	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0DFA	0x0E8E      	MOVLW       ?lstr6_CNC
0x0DFC	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0DFE	0x0E00      	MOVLW       hi_addr(?lstr6_CNC)
0x0E00	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0E02	0xDCC8      	RCALL       _strcmp
0x0E04	0x0E00      	MOVLW       0
0x0E06	0x1801      	XORWF       R1, 0 
0x0E08	0xE102      	BNZ         L__main133
0x0E0A	0x0E00      	MOVLW       0
0x0E0C	0x1800      	XORWF       R0, 0 
L__main133:
0x0E0E	0xE104      	BNZ         L_main11
;CNC.c,95 :: 		portb.f3 = 1;      //Turn on green led
0x0E10	0x8681      	BSF         PORTB, 3 
;CNC.c,96 :: 		stepper2StartClockWise();
0x0E12	0xDE60      	RCALL       _stepper2StartClockWise
;CNC.c,97 :: 		PORTb.f3 = 0;      //Turn off green led after finishing
0x0E14	0x9681      	BCF         PORTB, 3 
;CNC.c,98 :: 		}
0x0E16	0xD013      	BRA         L_main12
L_main11:
;CNC.c,99 :: 		else if(strcmp(stepper1Direction , "CCW") == 0)        //if direction is counter clockwise
0x0E18	0x0E29      	MOVLW       _stepper1Direction
0x0E1A	0x0101      	MOVLB       1
0x0E1C	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0E1E	0x0E01      	MOVLW       hi_addr(_stepper1Direction)
0x0E20	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0E22	0x0E82      	MOVLW       ?lstr7_CNC
0x0E24	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0E26	0x0E00      	MOVLW       hi_addr(?lstr7_CNC)
0x0E28	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0E2A	0xDCB4      	RCALL       _strcmp
0x0E2C	0x0E00      	MOVLW       0
0x0E2E	0x1801      	XORWF       R1, 0 
0x0E30	0xE102      	BNZ         L__main134
0x0E32	0x0E00      	MOVLW       0
0x0E34	0x1800      	XORWF       R0, 0 
L__main134:
0x0E36	0xE103      	BNZ         L_main13
;CNC.c,101 :: 		portb.f4 = 1;        //Turn on yellow led
0x0E38	0x8881      	BSF         PORTB, 4 
;CNC.c,102 :: 		stepper2StartCounterClockWise();
0x0E3A	0xDECF      	RCALL       _stepper2StartCounterClockWise
;CNC.c,103 :: 		PORTb.f4 = 0;       //Turn off yellow led after finishing
0x0E3C	0x9881      	BCF         PORTB, 4 
;CNC.c,104 :: 		}
L_main13:
L_main12:
;CNC.c,106 :: 		INTCON.TMR0IE = 0;    //Disable interrupt until a new start comes from PC
0x0E3E	0x9AF2      	BCF         INTCON, 5 
;CNC.c,107 :: 		}
0x0E40	0xD010      	BRA         L_main14
L_main10:
;CNC.c,108 :: 		else if(strcmp(recievedAction , "Start12") == 0)      //if the action is start
0x0E42	0x0E47      	MOVLW       _recievedAction
0x0E44	0x0101      	MOVLB       1
0x0E46	0x6F6C      	MOVWF       FARG_strcmp_s1, 1
0x0E48	0x0E01      	MOVLW       hi_addr(_recievedAction)
0x0E4A	0x6F6D      	MOVWF       FARG_strcmp_s1+1, 1
0x0E4C	0x0E86      	MOVLW       ?lstr8_CNC
0x0E4E	0x6F6E      	MOVWF       FARG_strcmp_s2, 1
0x0E50	0x0E00      	MOVLW       hi_addr(?lstr8_CNC)
0x0E52	0x6F6F      	MOVWF       FARG_strcmp_s2+1, 1
0x0E54	0xDC9F      	RCALL       _strcmp
0x0E56	0x0E00      	MOVLW       0
0x0E58	0x1801      	XORWF       R1, 0 
0x0E5A	0xE102      	BNZ         L__main135
0x0E5C	0x0E00      	MOVLW       0
0x0E5E	0x1800      	XORWF       R0, 0 
L__main135:
0x0E60	0xE100      	BNZ         L_main15
;CNC.c,110 :: 		}
L_main15:
L_main14:
L_main9:
;CNC.c,112 :: 		}       //end while
0x0E62	0xD769      	BRA         L_main1
;CNC.c,114 :: 		}//end main
L_end_main:
0x0E64	0xD7FF      	BRA         $+0
; end of _main
0x0F64	0xF017EE10  	LFSR        1, 23
0x0F68	0x0EFE      	MOVLW       254
0x0F6A	0x6E00      	MOVWF       R0 
0x0F6C	0x0E01      	MOVLW       1
0x0F6E	0x6E01      	MOVWF       R1 
0x0F70	0x0E66      	MOVLW       102
0x0F72	0x6EF6      	MOVWF       4086 
0x0F74	0x0E0E      	MOVLW       14
0x0F76	0x6EF7      	MOVWF       TBLPTRH 
0x0F78	0x0E00      	MOVLW       0
0x0F7A	0x6EF8      	MOVWF       TBLPTRU 
0x0F7C	0xF003EC31  	CALL        1634, 0
0x0F80	0x0012      	RETURN      0
;CNC.c,0 :: ?ICS?lstr25_CNC
0x0E66	0x7453 ;?ICS?lstr25_CNC+0
0x0E68	0x7065 ;?ICS?lstr25_CNC+2
0x0E6A	0x3173 ;?ICS?lstr25_CNC+4
0x0E6C	0x00 ;?ICS?lstr25_CNC+6
; end of ?ICS?lstr25_CNC
;CNC.c,0 :: ?ICS?lstr24_CNC
0x0E6D	0x6F21 ;?ICS?lstr24_CNC+0
0x0E6F	0x006B ;?ICS?lstr24_CNC+2
; end of ?ICS?lstr24_CNC
;CNC.c,0 :: ?ICS_stepper2Steps
0x0E71	0x0000 ;?ICS_stepper2Steps+0
; end of ?ICS_stepper2Steps
;CNC.c,0 :: ?ICS?lstr20_CNC
0x0E73	0x6946 ;?ICS?lstr20_CNC+0
0x0E75	0x696E ;?ICS?lstr20_CNC+2
0x0E77	0x6873 ;?ICS?lstr20_CNC+4
0x0E79	0x6465 ;?ICS?lstr20_CNC+6
0x0E7B	0x0032 ;?ICS?lstr20_CNC+8
; end of ?ICS?lstr20_CNC
;CNC.c,0 :: ?ICS?lstr26_CNC
0x0E7D	0x6F21 ;?ICS?lstr26_CNC+0
0x0E7F	0x006B ;?ICS?lstr26_CNC+2
; end of ?ICS?lstr26_CNC
;CNC.c,0 :: ?ICS?lstr16_CNC
0x0E81	0x6E49 ;?ICS?lstr16_CNC+0
0x0E83	0x7263 ;?ICS?lstr16_CNC+2
0x0E85	0x6D65 ;?ICS?lstr16_CNC+4
0x0E87	0x6E65 ;?ICS?lstr16_CNC+6
0x0E89	0x3274 ;?ICS?lstr16_CNC+8
0x0E8B	0x00 ;?ICS?lstr16_CNC+10
; end of ?ICS?lstr16_CNC
;CNC.c,0 :: ?ICS_stepper2LastStepDone
0x0E8C	0x0000 ;?ICS_stepper2LastStepDone+0
; end of ?ICS_stepper2LastStepDone
;CNC.c,0 :: ?ICS_stepper2Speed
0x0E8E	0x0000 ;?ICS_stepper2Speed+0
; end of ?ICS_stepper2Speed
;CNC.c,0 :: ?ICS?lstr12_CNC
0x0E90	0x6E49 ;?ICS?lstr12_CNC+0
0x0E92	0x7263 ;?ICS?lstr12_CNC+2
0x0E94	0x6D65 ;?ICS?lstr12_CNC+4
0x0E96	0x6E65 ;?ICS?lstr12_CNC+6
0x0E98	0x3174 ;?ICS?lstr12_CNC+8
0x0E9A	0x00 ;?ICS?lstr12_CNC+10
; end of ?ICS?lstr12_CNC
;CNC.c,0 :: ?ICS?lstr13_CNC
0x0E9B	0x6E49 ;?ICS?lstr13_CNC+0
0x0E9D	0x7263 ;?ICS?lstr13_CNC+2
0x0E9F	0x6D65 ;?ICS?lstr13_CNC+4
0x0EA1	0x6E65 ;?ICS?lstr13_CNC+6
0x0EA3	0x3274 ;?ICS?lstr13_CNC+8
0x0EA5	0x00 ;?ICS?lstr13_CNC+10
; end of ?ICS?lstr13_CNC
;CNC.c,0 :: ?ICS?lstr22_CNC
0x0EA6	0x6F21 ;?ICS?lstr22_CNC+0
0x0EA8	0x006B ;?ICS?lstr22_CNC+2
; end of ?ICS?lstr22_CNC
;CNC.c,0 :: ?ICS?lstr23_CNC
0x0EAA	0x7053 ;?ICS?lstr23_CNC+0
0x0EAC	0x6565 ;?ICS?lstr23_CNC+2
0x0EAE	0x3164 ;?ICS?lstr23_CNC+4
0x0EB0	0x00 ;?ICS?lstr23_CNC+6
; end of ?ICS?lstr23_CNC
;CNC.c,0 :: ?ICS?lstr21_CNC
0x0EB1	0x6944 ;?ICS?lstr21_CNC+0
0x0EB3	0x6572 ;?ICS?lstr21_CNC+2
0x0EB5	0x7463 ;?ICS?lstr21_CNC+4
0x0EB7	0x6F69 ;?ICS?lstr21_CNC+6
0x0EB9	0x316E ;?ICS?lstr21_CNC+8
0x0EBB	0x00 ;?ICS?lstr21_CNC+10
; end of ?ICS?lstr21_CNC
;CNC.c,0 :: ?ICS?lstr4_CNC
0x0EBC	0x4343 ;?ICS?lstr4_CNC+0
0x0EBE	0x0057 ;?ICS?lstr4_CNC+2
; end of ?ICS?lstr4_CNC
;CNC.c,0 :: ?ICS?lstr5_CNC
0x0EC0	0x7453 ;?ICS?lstr5_CNC+0
0x0EC2	0x7261 ;?ICS?lstr5_CNC+2
0x0EC4	0x3274 ;?ICS?lstr5_CNC+4
0x0EC6	0x00 ;?ICS?lstr5_CNC+6
; end of ?ICS?lstr5_CNC
;CNC.c,0 :: ?ICS?lstr2_CNC
0x0EC7	0x7453 ;?ICS?lstr2_CNC+0
0x0EC9	0x7261 ;?ICS?lstr2_CNC+2
0x0ECB	0x3174 ;?ICS?lstr2_CNC+4
0x0ECD	0x00 ;?ICS?lstr2_CNC+6
; end of ?ICS?lstr2_CNC
;CNC.c,0 :: ?ICS?lstr3_CNC
0x0ECE	0x5743 ;?ICS?lstr3_CNC+0
0x0ED0	0x00 ;?ICS?lstr3_CNC+2
; end of ?ICS?lstr3_CNC
;CNC.c,0 :: ?ICS?lstr7_CNC
0x0ED1	0x4343 ;?ICS?lstr7_CNC+0
0x0ED3	0x0057 ;?ICS?lstr7_CNC+2
; end of ?ICS?lstr7_CNC
;CNC.c,0 :: ?ICS?lstr8_CNC
0x0ED5	0x7453 ;?ICS?lstr8_CNC+0
0x0ED7	0x7261 ;?ICS?lstr8_CNC+2
0x0ED9	0x3174 ;?ICS?lstr8_CNC+4
0x0EDB	0x0032 ;?ICS?lstr8_CNC+6
; end of ?ICS?lstr8_CNC
;CNC.c,0 :: ?ICS?lstr6_CNC
0x0EDD	0x5743 ;?ICS?lstr6_CNC+0
0x0EDF	0x00 ;?ICS?lstr6_CNC+2
; end of ?ICS?lstr6_CNC
;CNC.c,0 :: ?ICS?lstr29_CNC
0x0EE0	0x7053 ;?ICS?lstr29_CNC+0
0x0EE2	0x6565 ;?ICS?lstr29_CNC+2
0x0EE4	0x3264 ;?ICS?lstr29_CNC+4
0x0EE6	0x00 ;?ICS?lstr29_CNC+6
; end of ?ICS?lstr29_CNC
;CNC.c,0 :: ?ICS?lstr28_CNC
0x0EE7	0x6F21 ;?ICS?lstr28_CNC+0
0x0EE9	0x006B ;?ICS?lstr28_CNC+2
; end of ?ICS?lstr28_CNC
;CNC.c,0 :: ?ICS?lstr30_CNC
0x0EEB	0x6F21 ;?ICS?lstr30_CNC+0
0x0EED	0x006B ;?ICS?lstr30_CNC+2
; end of ?ICS?lstr30_CNC
;CNC.c,0 :: ?ICS?lstr1_CNC
0x0EEF	0x6F21 ;?ICS?lstr1_CNC+0
0x0EF1	0x006B ;?ICS?lstr1_CNC+2
; end of ?ICS?lstr1_CNC
;CNC.c,0 :: ?ICS?lstr27_CNC
0x0EF3	0x6944 ;?ICS?lstr27_CNC+0
0x0EF5	0x6572 ;?ICS?lstr27_CNC+2
0x0EF7	0x7463 ;?ICS?lstr27_CNC+4
0x0EF9	0x6F69 ;?ICS?lstr27_CNC+6
0x0EFB	0x326E ;?ICS?lstr27_CNC+8
0x0EFD	0x00 ;?ICS?lstr27_CNC+10
; end of ?ICS?lstr27_CNC
;CNC.c,0 :: ?ICS?lstr19_CNC
0x0EFE	0x6946 ;?ICS?lstr19_CNC+0
0x0F00	0x696E ;?ICS?lstr19_CNC+2
0x0F02	0x6873 ;?ICS?lstr19_CNC+4
0x0F04	0x6465 ;?ICS?lstr19_CNC+6
0x0F06	0x0032 ;?ICS?lstr19_CNC+8
; end of ?ICS?lstr19_CNC
;CNC.c,0 :: ?ICS?lstr11_CNC
0x0F08	0x6E49 ;?ICS?lstr11_CNC+0
0x0F0A	0x7263 ;?ICS?lstr11_CNC+2
0x0F0C	0x6D65 ;?ICS?lstr11_CNC+4
0x0F0E	0x6E65 ;?ICS?lstr11_CNC+6
0x0F10	0x3174 ;?ICS?lstr11_CNC+8
0x0F12	0x00 ;?ICS?lstr11_CNC+10
; end of ?ICS?lstr11_CNC
;CNC.c,0 :: ?ICS?lstr14_CNC
0x0F13	0x6E49 ;?ICS?lstr14_CNC+0
0x0F15	0x7263 ;?ICS?lstr14_CNC+2
0x0F17	0x6D65 ;?ICS?lstr14_CNC+4
0x0F19	0x6E65 ;?ICS?lstr14_CNC+6
0x0F1B	0x3274 ;?ICS?lstr14_CNC+8
0x0F1D	0x00 ;?ICS?lstr14_CNC+10
; end of ?ICS?lstr14_CNC
;CNC.c,0 :: ?ICS?lstr15_CNC
0x0F1E	0x6E49 ;?ICS?lstr15_CNC+0
0x0F20	0x7263 ;?ICS?lstr15_CNC+2
0x0F22	0x6D65 ;?ICS?lstr15_CNC+4
0x0F24	0x6E65 ;?ICS?lstr15_CNC+6
0x0F26	0x3274 ;?ICS?lstr15_CNC+8
0x0F28	0x00 ;?ICS?lstr15_CNC+10
; end of ?ICS?lstr15_CNC
;CNC.c,0 :: ?ICS?lstr32_CNC
0x0F29	0x6F21 ;?ICS?lstr32_CNC+0
0x0F2B	0x006B ;?ICS?lstr32_CNC+2
; end of ?ICS?lstr32_CNC
;CNC.c,0 :: ?ICS?lstr9_CNC
0x0F2D	0x6E49 ;?ICS?lstr9_CNC+0
0x0F2F	0x7263 ;?ICS?lstr9_CNC+2
0x0F31	0x6D65 ;?ICS?lstr9_CNC+4
0x0F33	0x6E65 ;?ICS?lstr9_CNC+6
0x0F35	0x3174 ;?ICS?lstr9_CNC+8
0x0F37	0x00 ;?ICS?lstr9_CNC+10
; end of ?ICS?lstr9_CNC
;CNC.c,0 :: ?ICS?lstr18_CNC
0x0F38	0x6946 ;?ICS?lstr18_CNC+0
0x0F3A	0x696E ;?ICS?lstr18_CNC+2
0x0F3C	0x6873 ;?ICS?lstr18_CNC+4
0x0F3E	0x6465 ;?ICS?lstr18_CNC+6
0x0F40	0x0031 ;?ICS?lstr18_CNC+8
; end of ?ICS?lstr18_CNC
;CNC.c,0 :: ?ICS_stepper1Steps
0x0F42	0x0000 ;?ICS_stepper1Steps+0
; end of ?ICS_stepper1Steps
;CNC.c,0 :: ?ICS?lstr10_CNC
0x0F44	0x6E49 ;?ICS?lstr10_CNC+0
0x0F46	0x7263 ;?ICS?lstr10_CNC+2
0x0F48	0x6D65 ;?ICS?lstr10_CNC+4
0x0F4A	0x6E65 ;?ICS?lstr10_CNC+6
0x0F4C	0x3174 ;?ICS?lstr10_CNC+8
0x0F4E	0x00 ;?ICS?lstr10_CNC+10
; end of ?ICS?lstr10_CNC
;CNC.c,0 :: ?ICS?lstr17_CNC
0x0F4F	0x6946 ;?ICS?lstr17_CNC+0
0x0F51	0x696E ;?ICS?lstr17_CNC+2
0x0F53	0x6873 ;?ICS?lstr17_CNC+4
0x0F55	0x6465 ;?ICS?lstr17_CNC+6
0x0F57	0x0031 ;?ICS?lstr17_CNC+8
; end of ?ICS?lstr17_CNC
;CNC.c,0 :: ?ICS_stepper1Speed
0x0F59	0x0000 ;?ICS_stepper1Speed+0
; end of ?ICS_stepper1Speed
;CNC.c,0 :: ?ICS_stepper1LastStepDone
0x0F5B	0x0000 ;?ICS_stepper1LastStepDone+0
; end of ?ICS_stepper1LastStepDone
;CNC.c,0 :: ?ICS?lstr31_CNC
0x0F5D	0x7453 ;?ICS?lstr31_CNC+0
0x0F5F	0x7065 ;?ICS?lstr31_CNC+2
0x0F61	0x3273 ;?ICS?lstr31_CNC+4
0x0F63	0x00 ;?ICS?lstr31_CNC+6
; end of ?ICS?lstr31_CNC
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [46]    _interrupt
0x0036      [14]    _UART1_Write
0x0044      [82]    _Mul_32x32_U
0x0096      [18]    _writeLine
0x00A8     [190]    _VDelay_ms
0x0166      [52]    _UART1_Write_Text
0x019A      [80]    _Mul_16X16_U
0x01EA      [24]    _isdigit
0x0202      [12]    _writeToStepper1
0x020E      [88]    _Div_16x16_S_L
0x0266      [12]    _writeToStepper2
0x0272      [18]    _UART1_Read
0x0284      [10]    _UART1_Data_Ready
0x028E      [40]    _stepper2Step12
0x02B6      [90]    _getProperLastStepForCCW
0x0310      [42]    _stepper1Step41
0x033A      [42]    _stepper1Step34
0x0364      [42]    _stepper1Step23
0x038E      [40]    _stepper2Step41
0x03B6     [198]    _Div_16x16_S
0x047C     [154]    _UART1_Read_Text
0x0516     [210]    _atoi
0x05E8      [40]    _stepper2Step23
0x0610      [42]    _stepper1Step12
0x063A      [40]    _stepper2Step34
0x0662      [16]    ___CC2DW
0x0672     [202]    _getStepper1Settings
0x073C      [88]    _UART1_Init
0x0794      [76]    _strcmp
0x07E0     [280]    _stepper1StartCounterClockWise
0x08F8     [210]    _getStepper2Settings
0x09CA     [266]    _stepper1StartClockWise
0x0AD4     [262]    _stepper2StartClockWise
0x0BDA     [290]    _stepper2StartCounterClockWise
0x0CFC     [362]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    R0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    R1
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    FLASH_Write_8_i_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0002       [1]    R2
0x0002       [1]    FLASH_Write_8_SaveINTCON_L0
0x0002       [2]    memset_pp_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    memmove_tt_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    R3
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    memcpy_ss_L0
0x0004       [1]    R4
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    R8
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [7]    ?lstr25_CNC
0x001E       [4]    ?lstr24_CNC
0x0022       [2]    _stepper2Steps
0x0024      [10]    ?lstr20_CNC
0x002E       [4]    ?lstr26_CNC
0x0032      [11]    ?lstr16_CNC
0x003D       [2]    _stepper2LastStepDone
0x003F       [2]    _stepper2Speed
0x0041      [11]    ?lstr12_CNC
0x004C      [11]    ?lstr13_CNC
0x0057       [4]    ?lstr22_CNC
0x005B       [7]    ?lstr23_CNC
0x0062      [11]    ?lstr21_CNC
0x006D       [4]    ?lstr4_CNC
0x0071       [7]    ?lstr5_CNC
0x0078       [7]    ?lstr2_CNC
0x007F       [3]    ?lstr3_CNC
0x0082       [4]    ?lstr7_CNC
0x0086       [8]    ?lstr8_CNC
0x008E       [3]    ?lstr6_CNC
0x0091       [7]    ?lstr29_CNC
0x0098       [4]    ?lstr28_CNC
0x009C       [4]    ?lstr30_CNC
0x00A0       [4]    ?lstr1_CNC
0x00A4      [11]    ?lstr27_CNC
0x00AF      [10]    ?lstr19_CNC
0x00B9      [11]    ?lstr11_CNC
0x00C4      [11]    ?lstr14_CNC
0x00CF      [11]    ?lstr15_CNC
0x00DA       [4]    ?lstr32_CNC
0x00DE      [11]    ?lstr9_CNC
0x00E9      [10]    ?lstr18_CNC
0x00F3       [2]    _stepper1Steps
0x00F5      [11]    ?lstr10_CNC
0x0100      [10]    ?lstr17_CNC
0x010A       [2]    _stepper1Speed
0x010C       [2]    _stepper1LastStepDone
0x010E       [7]    ?lstr31_CNC
0x0115      [10]    _stepper1StepsString
0x011F      [10]    _stepper1SpeedString
0x0129      [10]    _stepper1Direction
0x0133      [10]    _stepper2Direction
0x013D      [10]    _stepper2SpeedString
0x0147      [10]    _recievedAction
0x0151      [10]    _stepper2StepsString
0x015B       [1]    _stopAction
0x015C       [4]    _UART_Wr_Ptr
0x0160       [4]    _UART_Rdy_Ptr
0x0164       [4]    _UART_Rd_Ptr
0x0168       [4]    _UART_Tx_Idle_Ptr
0x016C       [2]    stepper1StartClockWise_i_L0
0x016C       [2]    stepper1StartCounterClockWise_i_L0
0x016C       [2]    stepper2StartClockWise_i_L0
0x016C       [2]    FARG_strcmp_s1
0x016C       [2]    stepper2StartCounterClockWise_i_L0
0x016E       [2]    FARG_strcmp_s2
0x016E       [2]    stepper2StartClockWise_stepsNeeded_L0
0x016E       [2]    stepper1StartCounterClockWise_stepsNeeded_L0
0x016E       [2]    stepper2StartCounterClockWise_stepsNeeded_L0
0x016E       [2]    stepper1StartClockWise_stepsNeeded_L0
0x0170       [2]    FARG_atoi_s
0x0170       [2]    FARG_getProperLastStepForCCW_lastStep
0x0170       [2]    FARG_UART1_Read_Text_Output
0x0172       [2]    atoi_c_L0
0x0172       [2]    FARG_UART1_Read_Text_Delimiter
0x0174       [1]    FARG_UART1_Read_Text_Attempts
0x0174       [2]    atoi_a_L0
0x0175       [1]    UART1_Read_Text_r_data_L0
0x0176       [2]    atoi_sign_L0
0x0176       [1]    UART1_Read_Text_out_idx_L0
0x0177       [1]    UART1_Read_Text_delim_idx_L0
0x0178       [1]    FARG_isdigit_character
0x0178       [1]    FARG_writeToStepper2_newstep
0x0178       [1]    FARG_writeToStepper1_newstep
0x0178       [2]    FARG_VDelay_ms_Time_ms
0x0178       [2]    FARG_UART1_Write_Text_uart_text
0x017A       [4]    VDelay_ms_NumberOfCyc_L0
0x017A       [1]    UART1_Write_Text_data__L0
0x017B       [1]    UART1_Write_Text_counter_L0
0x017E       [1]    FARG_UART1_Write_data_
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F93       [1]    TRISB
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F95       [1]    TRISD
0x0F9E       [1]    PIR1
0x0FAB       [1]    RCSTA
0x0FAC       [1]    TXSTA
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0E66       [7]    ?ICS?lstr25_CNC
0x0E6D       [4]    ?ICS?lstr24_CNC
0x0E71       [2]    ?ICS_stepper2Steps
0x0E73      [10]    ?ICS?lstr20_CNC
0x0E7D       [4]    ?ICS?lstr26_CNC
0x0E81      [11]    ?ICS?lstr16_CNC
0x0E8C       [2]    ?ICS_stepper2LastStepDone
0x0E8E       [2]    ?ICS_stepper2Speed
0x0E90      [11]    ?ICS?lstr12_CNC
0x0E9B      [11]    ?ICS?lstr13_CNC
0x0EA6       [4]    ?ICS?lstr22_CNC
0x0EAA       [7]    ?ICS?lstr23_CNC
0x0EB1      [11]    ?ICS?lstr21_CNC
0x0EBC       [4]    ?ICS?lstr4_CNC
0x0EC0       [7]    ?ICS?lstr5_CNC
0x0EC7       [7]    ?ICS?lstr2_CNC
0x0ECE       [3]    ?ICS?lstr3_CNC
0x0ED1       [4]    ?ICS?lstr7_CNC
0x0ED5       [8]    ?ICS?lstr8_CNC
0x0EDD       [3]    ?ICS?lstr6_CNC
0x0EE0       [7]    ?ICS?lstr29_CNC
0x0EE7       [4]    ?ICS?lstr28_CNC
0x0EEB       [4]    ?ICS?lstr30_CNC
0x0EEF       [4]    ?ICS?lstr1_CNC
0x0EF3      [11]    ?ICS?lstr27_CNC
0x0EFE      [10]    ?ICS?lstr19_CNC
0x0F08      [11]    ?ICS?lstr11_CNC
0x0F13      [11]    ?ICS?lstr14_CNC
0x0F1E      [11]    ?ICS?lstr15_CNC
0x0F29       [4]    ?ICS?lstr32_CNC
0x0F2D      [11]    ?ICS?lstr9_CNC
0x0F38      [10]    ?ICS?lstr18_CNC
0x0F42       [2]    ?ICS_stepper1Steps
0x0F44      [11]    ?ICS?lstr10_CNC
0x0F4F      [10]    ?ICS?lstr17_CNC
0x0F59       [2]    ?ICS_stepper1Speed
0x0F5B       [2]    ?ICS_stepper1LastStepDone
0x0F5D       [7]    ?ICS?lstr31_CNC
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_stepper1StartClockWise16
  L_stepper1StartClockWise17
  L_stepper1StartClockWise18
  L_stepper1StartClockWise19
  L_stepper1StartClockWise20
  L_stepper1StartClockWise21
  L_stepper1StartClockWise22
  L_stepper1StartClockWise23
  L_stepper1StartClockWise24
  L_stepper1StartClockWise25
  L_stepper1StartClockWise26
  L_stepper1StartClockWise27
  L_stepper1StartClockWise28
  L_stepper1StartClockWise29
  L_stepper1StartClockWise30
  L_stepper1StartClockWise31
  L_stepper1StartClockWise32
  L_stepper1StartClockWise33
  L_stepper1StartClockWise34
  L_stepper1StartCounterClockWise35
  L_stepper1StartCounterClockWise36
  L_stepper1StartCounterClockWise37
  L_stepper1StartCounterClockWise38
  L_stepper1StartCounterClockWise39
  L_stepper1StartCounterClockWise40
  L_stepper1StartCounterClockWise41
  L_stepper1StartCounterClockWise42
  L_stepper1StartCounterClockWise43
  L_stepper1StartCounterClockWise44
  L_stepper1StartCounterClockWise45
  L_stepper1StartCounterClockWise46
  L_stepper1StartCounterClockWise47
  L_stepper1StartCounterClockWise48
  L_stepper1StartCounterClockWise49
  L_stepper1StartCounterClockWise50
  L_stepper1StartCounterClockWise51
  L_stepper1StartCounterClockWise52
  L_stepper1StartCounterClockWise53
  L_stepper2StartClockWise54
  L_stepper2StartClockWise55
  L_stepper2StartClockWise56
  L_stepper2StartClockWise57
  L_stepper2StartClockWise58
  L_stepper2StartClockWise59
  L_stepper2StartClockWise60
  L_stepper2StartClockWise61
  L_stepper2StartClockWise62
  L_stepper2StartClockWise63
  L_stepper2StartClockWise64
  L_stepper2StartClockWise65
  L_stepper2StartClockWise66
  L_stepper2StartClockWise67
  L_stepper2StartClockWise68
  L_stepper2StartClockWise69
  L_stepper2StartClockWise70
  L_stepper2StartClockWise71
  L_stepper2StartClockWise72
  L_stepper2StartCounterClockWise73
  L_stepper2StartCounterClockWise74
  L_stepper2StartCounterClockWise75
  L_stepper2StartCounterClockWise76
  L_stepper2StartCounterClockWise77
  L_stepper2StartCounterClockWise78
  L_stepper2StartCounterClockWise79
  L_stepper2StartCounterClockWise80
  L_stepper2StartCounterClockWise81
  L_stepper2StartCounterClockWise82
  L_stepper2StartCounterClockWise83
  L_stepper2StartCounterClockWise84
  L_stepper2StartCounterClockWise85
  L_stepper2StartCounterClockWise86
  L_stepper2StartCounterClockWise87
  L_stepper2StartCounterClockWise88
  L_stepper2StartCounterClockWise89
  L_stepper2StartCounterClockWise90
  L_stepper2StartCounterClockWise91
  L_interrupt92
  L_interrupt93
  L_getProperLastStepForCCW94
  L_getProperLastStepForCCW95
  L_getProperLastStepForCCW96
  L_getProperLastStepForCCW97
  L_getProperLastStepForCCW98
  L_getProperLastStepForCCW99
  L_getStepper1Settings100
  L_getStepper1Settings101
  L_getStepper1Settings102
  L_getStepper1Settings103
  L_getStepper1Settings104
  L_getStepper1Settings105
  L_getStepper2Settings106
  L_getStepper2Settings107
  L_getStepper2Settings108
  L_getStepper2Settings109
  L_getStepper2Settings110
  L_getStepper2Settings111
  L__stepper1StartClockWise112
  L__stepper1StartClockWise113
  L__stepper1StartClockWise114
  L__stepper1StartClockWise115
  L__stepper1StartCounterClockWise116
  L__stepper1StartCounterClockWise117
  L__stepper1StartCounterClockWise118
  L__stepper1StartCounterClockWise119
  L__stepper2StartClockWise120
  L__stepper2StartClockWise121
  L__stepper2StartClockWise122
  L__stepper2StartClockWise123
  L__stepper2StartCounterClockWise124
  L__stepper2StartCounterClockWise125
  L__stepper2StartCounterClockWise126
  L__stepper2StartCounterClockWise127
  L_end_main
  _main
  L__main129
  L__main130
  L__main131
  L__main132
  L__main133
  L__main134
  L__main135
  L_end_stepper1Step12
  _stepper1Step12
  L_end_stepper1Step23
  _stepper1Step23
  L_end_stepper1Step34
  _stepper1Step34
  L_end_stepper1Step41
  _stepper1Step41
  L_end_stepper2Step12
  _stepper2Step12
  L_end_stepper2Step23
  _stepper2Step23
  L_end_stepper2Step34
  _stepper2Step34
  L_end_stepper2Step41
  _stepper2Step41
  L_end_stepper1StartClockWise
  _stepper1StartClockWise
  L__stepper1StartClockWise145
  L__stepper1StartClockWise146
  L__stepper1StartClockWise147
  L__stepper1StartClockWise148
  L__stepper1StartClockWise149
  L_end_stepper1StartCounterClockWise
  _stepper1StartCounterClockWise
  L__stepper1StartCounterClockWise151
  L__stepper1StartCounterClockWise152
  L__stepper1StartCounterClockWise153
  L__stepper1StartCounterClockWise154
  L__stepper1StartCounterClockWise155
  L_end_stepper2StartClockWise
  _stepper2StartClockWise
  L__stepper2StartClockWise157
  L__stepper2StartClockWise158
  L__stepper2StartClockWise159
  L__stepper2StartClockWise160
  L__stepper2StartClockWise161
  L_end_stepper2StartCounterClockWise
  _stepper2StartCounterClockWise
  L__stepper2StartCounterClockWise163
  L__stepper2StartCounterClockWise164
  L__stepper2StartCounterClockWise165
  L__stepper2StartCounterClockWise166
  L__stepper2StartCounterClockWise167
  L_end_writeLine
  _writeLine
  L_end_interrupt
  _interrupt
  L__interrupt170
  L_end_getProperLastStepForCCW
  _getProperLastStepForCCW
  L__getProperLastStepForCCW172
  L__getProperLastStepForCCW173
  L__getProperLastStepForCCW174
  L__getProperLastStepForCCW175
  L_end_getStepper1Settings
  _getStepper1Settings
  L_end_getStepper2Settings
  _getStepper2Settings
  L_end_writeToStepper1
  _writeToStepper1
  L_end_writeToStepper2
  _writeToStepper2
  L_abs0
  L___Lib_CStdlib_strtod1
  L___Lib_CStdlib_strtod2
  L___Lib_CStdlib_strtod3
  L___Lib_CStdlib_strtod4
  L___Lib_CStdlib_strtod5
  L___Lib_CStdlib_strtod6
  L___Lib_CStdlib_strtod7
  L___Lib_CStdlib_strtod8
  L___Lib_CStdlib_strtod9
  L___Lib_CStdlib_strtod10
  L___Lib_CStdlib_strtod11
  L___Lib_CStdlib_strtod12
  L___Lib_CStdlib_strtod13
  L___Lib_CStdlib_strtod14
  L___Lib_CStdlib_strtod15
  L___Lib_CStdlib_strtod16
  L___Lib_CStdlib_strtod17
  L___Lib_CStdlib_strtod18
  L___Lib_CStdlib_strtod19
  L___Lib_CStdlib_strtod20
  L___Lib_CStdlib_strtod21
  L___Lib_CStdlib_strtod22
  L___Lib_CStdlib_strtod23
  L___Lib_CStdlib_strtod24
  L___Lib_CStdlib_strtod25
  L___Lib_CStdlib_strtod26
  L___Lib_CStdlib_strtod27
  L___Lib_CStdlib_strtod28
  L___Lib_CStdlib_strtod29
  L___Lib_CStdlib_strtod30
  L___Lib_CStdlib_strtod31
  L___Lib_CStdlib_strtod32
  L___Lib_CStdlib_strtod33
  L___Lib_CStdlib_strtod34
  L___Lib_CStdlib_strtod35
  L___Lib_CStdlib_strtod36
  L___Lib_CStdlib_strtod37
  L___Lib_CStdlib_strtod38
  L___Lib_CStdlib_strtod39
  L___Lib_CStdlib_strtod40
  L___Lib_CStdlib_strtod41
  L___Lib_CStdlib_strtod42
  L___Lib_CStdlib_strtod43
  L___Lib_CStdlib_strtod44
  L___Lib_CStdlib_strtod45
  L___Lib_CStdlib_strtod46
  L___Lib_CStdlib_strtod47
  L___Lib_CStdlib_strtod48
  L___Lib_CStdlib_strtod49
  L___Lib_CStdlib_strtod50
  L___Lib_CStdlib_strtod51
  L___Lib_CStdlib_strtod52
  ___atoi_skipws_atoi
  L_atoi53
  L_atoi54
  L_atoi55
  L_atoi56
  L_atoi57
  L_atoi58
  ___atoi_conv_atoi
  L_atoi59
  L_atoi60
  ___atol_skipws_atol
  L_atol61
  L_atol62
  L_atol63
  L_atol64
  L_atol65
  L_atol66
  ___atol_conv_atol
  L_atol67
  L_atol68
  L_div69
  L_ldiv70
  L_uldiv71
  L_labs72
  L_max73
  L_min74
  L_rand75
  L_xtoi76
  L_xtoi77
  L_xtoi78
  L_xtoi79
  L_xtoi80
  L_xtoi81
  L_xtoi82
  L_xtoi83
  L_xtoi84
  L_xtoi85
  L_xtoi86
  L___Lib_CStdlib_strtod87
  L___Lib_CStdlib_strtod88
  L___Lib_CStdlib_strtod89
  L__atoi90
  L__atol91
  L_end_abs
  _abs
  L__abs93
  L_end_strtod
  __Lib_CStdlib_strtod
  L___Lib_CStdlib_strtod95
  L___Lib_CStdlib_strtod96
  L___Lib_CStdlib_strtod97
  L_end_atof
  _atof
  L_end_atoi
  _atoi
  L__atoi100
  L__atoi101
  L__atoi102
  L__atoi103
  L_end_atol
  _atol
  L__atol105
  L__atol106
  L_end_div
  _div
  L_end_ldiv
  _ldiv
  L_end_uldiv
  _uldiv
  L_end_labs
  _labs
  L__labs111
  L_end_max
  _max
  L__max113
  L_end_min
  _min
  L__min115
  L_end_srand
  _srand
  L_end_rand
  _rand
  L_end_xtoi
  _xtoi
  L_memchr0
  L_memchr1
  L_memchr2
  L_memchr3
  L_memcmp4
  L_memcmp5
  L_memcmp6
  L_memcpy7
  L_memcpy8
  L_memmove9
  L_memmove10
  L_memmove11
  L_memmove12
  L_memmove13
  L_memmove14
  L_memmove15
  L_memmove16
  L_memmove17
  L_memmove18
  L_memmove19
  L_memset20
  L_memset21
  L_strcat22
  L_strcat23
  L_strcat24
  L_strcat25
  L_strchr26
  L_strchr27
  L_strchr28
  L_strchr29
  L_strcmp30
  L_strcmp31
  L_strcmp32
  L_strcmp33
  L_strcpy34
  L_strcpy35
  L_strlen36
  L_strlen37
  L_strncat38
  L_strncat39
  L_strncat40
  L_strncat41
  L_strncat42
  L_strncat43
  L_strncat44
  L_strncpy45
  L_strncpy46
  L_strncpy47
  L_strncpy48
  L_strncpy49
  L_strspn50
  L_strspn51
  L_strspn52
  L_strspn53
  L_strcspn54
  L_strcspn55
  L_strcspn56
  L_strcspn57
  L_strncmp58
  L_strncmp59
  L_strncmp60
  L_strncmp61
  L_strncmp62
  L_strpbrk63
  L_strpbrk64
  L_strpbrk65
  L_strrchr66
  L_strrchr67
  L_strrchr68
  L_strrchr69
  L_strstr70
  L_strstr71
  L_strstr72
  L_strstr73
  L_strstr74
  L_strtok75
  L_strtok76
  L_strtok77
  L_strtok78
  L_strtok79
  L__memmove80
  L__strcmp81
  L__strncat82
  L__strspn83
  L__strcspn84
  L__strncmp85
  L__strstr86
  L_end_memchr
  _memchr
  L_end_memcmp
  _memcmp
  L__memcmp89
  L_end_memcpy
  _memcpy
  L_end_memmove
  _memmove
  L__memmove92
  L__memmove93
  L_end_memset
  _memset
  L_end_strcat
  _strcat
  L_end_strchr
  _strchr
  L_end_strcmp
  _strcmp
  L_end_strcpy
  _strcpy
  L_end_strlen
  _strlen
  L_end_strncat
  _strncat
  L__strncat101
  L_end_strncpy
  _strncpy
  L_end_strspn
  _strspn
  L__strspn104
  L_end_strcspn
  _strcspn
  L__strcspn106
  L_end_strncmp
  _strncmp
  L_end_strpbrk
  _strpbrk
  L_end_strrchr
  _strrchr
  L__strrchr110
  L_end_strstr
  _strstr
  L__strstr112
  L__strstr113
  L_end_strtok
  _strtok
  L__strtok115
  L_islower0
  L_islower1
  L_isupper2
  L_isupper3
  L_isalpha4
  L_isalpha5
  L_iscntrl6
  L_iscntrl7
  L_isdigit8
  L_isdigit9
  L_isalnum10
  L_isalnum11
  L_isspace12
  L_isspace13
  L_isspace14
  L_isspace15
  L_ispunct16
  L_ispunct17
  L_ispunct18
  L_ispunct19
  L_ispunct20
  L_ispunct21
  L_ispunct22
  L_ispunct23
  L_isgraph24
  L_isgraph25
  L_isxdigit26
  L_isxdigit27
  L_isxdigit28
  L_isxdigit29
  L_tolower30
  L_tolower31
  L_tolower32
  L_toupper33
  L_toupper34
  L_toupper35
  L__isspace36
  L__tolower37
  L__toupper38
  L_end_islower
  _islower
  L_end_isupper
  _isupper
  L_end_isalpha
  _isalpha
  L_end_iscntrl
  _iscntrl
  L_end_isdigit
  _isdigit
  L_end_isalnum
  _isalnum
  L_end_isspace
  _isspace
  L_end_ispunct
  _ispunct
  L_end_isgraph
  _isgraph
  L_end_isxdigit
  _isxdigit
  L_end_tolower
  _tolower
  L_end_toupper
  _toupper
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_100ms9
  L_Delay_10ms10
  L_Delay_1sec11
  L____Boot_Delay4k12
  L____Boot_Delay8k13
  L____Boot_Delay12k14
  L____Boot_Delay16k15
  L____Boot_Delay24k16
  L____Boot_Delay32k17
  L____Boot_Delay48k18
  L____Boot_Delay64k19
  L____Boot_Delay128k20
  L_Delay_Cyc21
  L_Delay_Cyc22
  L_VDelay_ms23
  L_VDelay_ms24
  L_VDelay_ms25
  L_VDelay_Advanced_ms26
  L_VDelay_Advanced_ms27
  L_VDelay_Advanced_ms28
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end____Boot_Delay4k
  ____Boot_Delay4k
  L_end____Boot_Delay8k
  ____Boot_Delay8k
  L_end____Boot_Delay12k
  ____Boot_Delay12k
  L_end____Boot_Delay16k
  ____Boot_Delay16k
  L_end____Boot_Delay24k
  ____Boot_Delay24k
  L_end____Boot_Delay32k
  ____Boot_Delay32k
  L_end____Boot_Delay48k
  ____Boot_Delay48k
  L_end____Boot_Delay64k
  ____Boot_Delay64k
  L_end____Boot_Delay128k
  ____Boot_Delay128k
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms54
  L__VDelay_ms55
  L__VDelay_ms56
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms58
  L__VDelay_Advanced_ms59
  L__VDelay_Advanced_ms60
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Div_8X8_U
  _Div_8X8_U
  L_end_Div_16X16_U
  _Div_16X16_U
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8X8_S
  _Div_8X8_S
  L_end_Mul_8X8_S
  _Mul_8X8_S
  L_end_Mul_16X16_U
  _Mul_16X16_U
  L_end_Mul_16X16_S
  _Mul_16X16_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_main0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_stepper1StartClockWise16
  L_stepper1StartClockWise17
  L_stepper1StartClockWise18
  L_stepper1StartClockWise19
  L_stepper1StartClockWise20
  L_stepper1StartClockWise21
  L_stepper1StartClockWise22
  L_stepper1StartClockWise23
  L_stepper1StartClockWise24
  L_stepper1StartClockWise25
  L_stepper1StartClockWise26
  L_stepper1StartClockWise27
  L_stepper1StartClockWise28
  L_stepper1StartClockWise29
  L_stepper1StartClockWise30
  L_stepper1StartClockWise31
  L_stepper1StartClockWise32
  L_stepper1StartClockWise33
  L_stepper1StartClockWise34
  L_stepper1StartCounterClockWise35
  L_stepper1StartCounterClockWise36
  L_stepper1StartCounterClockWise37
  L_stepper1StartCounterClockWise38
  L_stepper1StartCounterClockWise39
  L_stepper1StartCounterClockWise40
  L_stepper1StartCounterClockWise41
  L_stepper1StartCounterClockWise42
  L_stepper1StartCounterClockWise43
  L_stepper1StartCounterClockWise44
  L_stepper1StartCounterClockWise45
  L_stepper1StartCounterClockWise46
  L_stepper1StartCounterClockWise47
  L_stepper1StartCounterClockWise48
  L_stepper1StartCounterClockWise49
  L_stepper1StartCounterClockWise50
  L_stepper1StartCounterClockWise51
  L_stepper1StartCounterClockWise52
  L_stepper1StartCounterClockWise53
  L_stepper2StartClockWise54
  L_stepper2StartClockWise55
  L_stepper2StartClockWise56
  L_stepper2StartClockWise57
  L_stepper2StartClockWise58
  L_stepper2StartClockWise59
  L_stepper2StartClockWise60
  L_stepper2StartClockWise61
  L_stepper2StartClockWise62
  L_stepper2StartClockWise63
  L_stepper2StartClockWise64
  L_stepper2StartClockWise65
  L_stepper2StartClockWise66
  L_stepper2StartClockWise67
  L_stepper2StartClockWise68
  L_stepper2StartClockWise69
  L_stepper2StartClockWise70
  L_stepper2StartClockWise71
  L_stepper2StartClockWise72
  L_stepper2StartCounterClockWise73
  L_stepper2StartCounterClockWise74
  L_stepper2StartCounterClockWise75
  L_stepper2StartCounterClockWise76
  L_stepper2StartCounterClockWise77
  L_stepper2StartCounterClockWise78
  L_stepper2StartCounterClockWise79
  L_stepper2StartCounterClockWise80
  L_stepper2StartCounterClockWise81
  L_stepper2StartCounterClockWise82
  L_stepper2StartCounterClockWise83
  L_stepper2StartCounterClockWise84
  L_stepper2StartCounterClockWise85
  L_stepper2StartCounterClockWise86
  L_stepper2StartCounterClockWise87
  L_stepper2StartCounterClockWise88
  L_stepper2StartCounterClockWise89
  L_stepper2StartCounterClockWise90
  L_stepper2StartCounterClockWise91
  L_interrupt92
  L_interrupt93
  L_getProperLastStepForCCW94
  L_getProperLastStepForCCW95
  L_getProperLastStepForCCW96
  L_getProperLastStepForCCW97
  L_getProperLastStepForCCW98
  L_getProperLastStepForCCW99
  L_getStepper1Settings100
  L_getStepper1Settings101
  L_getStepper1Settings102
  L_getStepper1Settings103
  L_getStepper1Settings104
  L_getStepper1Settings105
  L_getStepper2Settings106
  L_getStepper2Settings107
  L_getStepper2Settings108
  L_getStepper2Settings109
  L_getStepper2Settings110
  L_getStepper2Settings111
  L__stepper1StartClockWise112
  L__stepper1StartClockWise113
  L__stepper1StartClockWise114
  L__stepper1StartClockWise115
  L__stepper1StartCounterClockWise116
  L__stepper1StartCounterClockWise117
  L__stepper1StartCounterClockWise118
  L__stepper1StartCounterClockWise119
  L__stepper2StartClockWise120
  L__stepper2StartClockWise121
  L__stepper2StartClockWise122
  L__stepper2StartClockWise123
  L__stepper2StartCounterClockWise124
  L__stepper2StartCounterClockWise125
  L__stepper2StartCounterClockWise126
  L__stepper2StartCounterClockWise127
  L_end_main
  _main
  L__main129
  L__main130
  L__main131
  L__main132
  L__main133
  L__main134
  L__main135
  L_end_stepper1Step12
  _stepper1Step12
  L_end_stepper1Step23
  _stepper1Step23
  L_end_stepper1Step34
  _stepper1Step34
  L_end_stepper1Step41
  _stepper1Step41
  L_end_stepper2Step12
  _stepper2Step12
  L_end_stepper2Step23
  _stepper2Step23
  L_end_stepper2Step34
  _stepper2Step34
  L_end_stepper2Step41
  _stepper2Step41
  L_end_stepper1StartClockWise
  _stepper1StartClockWise
  L__stepper1StartClockWise145
  L__stepper1StartClockWise146
  L__stepper1StartClockWise147
  L__stepper1StartClockWise148
  L__stepper1StartClockWise149
  L_end_stepper1StartCounterClockWise
  _stepper1StartCounterClockWise
  L__stepper1StartCounterClockWise151
  L__stepper1StartCounterClockWise152
  L__stepper1StartCounterClockWise153
  L__stepper1StartCounterClockWise154
  L__stepper1StartCounterClockWise155
  L_end_stepper2StartClockWise
  _stepper2StartClockWise
  L__stepper2StartClockWise157
  L__stepper2StartClockWise158
  L__stepper2StartClockWise159
  L__stepper2StartClockWise160
  L__stepper2StartClockWise161
  L_end_stepper2StartCounterClockWise
  _stepper2StartCounterClockWise
  L__stepper2StartCounterClockWise163
  L__stepper2StartCounterClockWise164
  L__stepper2StartCounterClockWise165
  L__stepper2StartCounterClockWise166
  L__stepper2StartCounterClockWise167
  L_end_writeLine
  _writeLine
  L_end_interrupt
  _interrupt
  L__interrupt170
  L_end_getProperLastStepForCCW
  _getProperLastStepForCCW
  L__getProperLastStepForCCW172
  L__getProperLastStepForCCW173
  L__getProperLastStepForCCW174
  L__getProperLastStepForCCW175
  L_end_getStepper1Settings
  _getStepper1Settings
  L_end_getStepper2Settings
  _getStepper2Settings
  L_end_writeToStepper1
  _writeToStepper1
  L_end_writeToStepper2
  _writeToStepper2
